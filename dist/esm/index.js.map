{"version":3,"sources":["../../src/index.js"],"names":["v4","uuidv4","merge","crypto","DirectedGraphMap","EventEmitter","farmhash","LruCache","ObservedRemoveSet","ObservedRemoveMap","PQueue","ActiveProviderDump","BraidEvent","BraidSocketEvent","Credentials","CredentialsResponse","CustomMapDump","CustomSetDump","DataDump","DataSyncDeletions","DataSyncInsertions","EventSubscribeRequest","EventSubscribeResponse","EventUnsubscribe","MergeChunksPromise","MultipartContainer","PeerDump","PeerRequest","PeerResponse","PeerSubscriptionDump","PeerSync","PeerSyncResponse","ProviderDump","PublishRequest","PublishResponse","PublisherClose","PublisherMessage","PublisherOpen","PublisherPeerMessage","ReceiverDump","SubscribeRequest","SubscribeResponse","Unpublish","Unsubscribe","decode","encode","isNativeAccelerationEnabled","hash32","hash64","makeLogger","requestIp","PeerConnection","PublisherServerManager","PublisherSessionManager","randomInteger","randomBytes","readUInt32BE","MAX_PAYLOAD_LENGTH","MAX_BACKPRESSURE","previousGenerationCredentialsResponse","Buffer","from","previousGenerationReloadResponse","Server","constructor","uwsServer","websocketPattern","websocketBehavior","compression","closeOnBackpressureLimit","maxPayloadLength","maxBackpressure","idleTimeout","options","messageHashes","max","shouldDeduplicate","recordHashes","Map","recordHashObjects","Set","updateHashOnSet","name","data","has","delete","hash","set","updateHashOnDelete","mergeChunkPromises","drainCallbacks","bufferPublishing","peers","providers","activeProviders","receivers","peerSubscriptions","peerSubscriptionMap","providerRegexes","provideCallbacks","provideOptions","provideDebounceTimeouts","receiverRegexes","receiveCallbacks","receiverServers","receiverSessions","publisherSessions","publisherServers","sockets","socketCredentialQueues","peerSockets","peerConnections","subscriptions","publishers","eventSubscriptions","keysForDeletion","peerReconnectTimeouts","_customMaps","_customSets","mapsGetter","target","existing","get","map","on","queue","publishToPeers","id","maps","Proxy","TypeError","setsGetter","sets","logger","isClosing","flushInterval","setInterval","flush","customMap","values","keyFlushInterval","now","Date","key","timestamp","setCredentialsHandler","credentials","success","code","message","setPeerRequestHandler","setSubscribeRequestHandler","setEventSubscribeRequestHandler","setPublishRequestHandler","publishData","peerId","peerIds","assignProvider","add","clearTimeout","removeActiveProvider","size","peerIdAndRegexString","regexString","debounce","setTimeout","previousPeerIds","length","prunePeers","previousPeerIdAndRegexString","callback","unprovide","previousPeerId","previousRegexString","regexStrings","regexPairs","RegExp","keysWithoutProviders","keys","filter","regexPair","regex","test","previousRegexStrings","regexMap","Array","isArray","includes","serverId","socketId","unassignReceiver","hasPublisher","assignReceiver","websocketOptions","Object","assign","upgrade","res","req","context","writeStatus","end","socketIp","socketOptions","ip","getHeader","info","error","stack","split","forEach","line","drain","ws","callbacks","open","emit","isBinary","toString","hasSource","getTargets","handleMessage","handleCredentialsRequest","value","handlePeerRequest","handleSubscribeRequest","removeSubscription","handleEventSubscribeRequest","removeEventSubscription","handlePublishRequest","removePublisher","handlePublisherMessage","indexOf","sentPrevousGeneration","send","close","removeSubscriptions","removePublishers","removeEventSubscriptions","removeSource","updatePeers","client","setMaxListeners","JSON","stringify","handleMultipartContainer","multipartContainer","existingMergeChunksPromise","push","mergeChunksPromise","getMergeChunksPromise","buffer","waitForDrain","socket","Error","getBufferedAmount","Promise","resolve","reject","errbacks","undefined","deduplicate","active","off","emitToClients","args","publishEvent","emitToSocket","publishSocketEvent","throwOnLeakedReferences","obj","ids","peerUWSSockets","edges","readyState","encoded","sendToPeer","peerConnection","getSources","func","credentialsHandler","peerRequestHandler","subscribeRequestHandler","eventSubscribeRequestHandler","publishRequestHandler","newClientCredentials","_handleCredentialsRequest","newQueue","concurrency","onIdle","then","credentialsDidUpdate","setImmediate","clientCredentials","getOwnPropertyNames","response","unencoded","wsA","warn","hasTarget","waitForSocketCredentialQueue","addPeer","targets","syncPeerSocket","addSubscription","addEventSubscription","addPublisher","process","insertions","deletions","handlePeerSync","handlePublisherOpen","handlePublisherClose","handlePublisherPeerMessage","customSet","subscriberEvent","subscriptionMap","valuePair","valueId","insertionQueue","deletionQueue","addEdge","removeEdge","pair","pairs","peerIdAndRegexStrings","regexes","sort","x","y","provide","activeRegexString","peerIdWithRegexes","activePeerId","Math","floor","random","serverIds","servers","openCallback","closeCallback","messageCallback","receive","unreceive","connectedPeers","connectedPeerIds","disconnectedPeerIds","removePeer","pId","removeServer","peerDisconnectPromises","disconnectFromPeer","timeout","all","reconnectTimeout","clear","provideDebounceTimeout","clearInterval","connectToPeer","address","messageQueue","queueMessages","shouldReconnect","reconnectToPeer","removeListener","syncPeerConnection","peerReconnectTimeout","handleClose","sId","handleError","attempt","duration","round","peerSync","customMapDump","customMapDumps","dump","customSetDumps","customSetDump","peerSyncResponsePromise","handlePeerSyncReponse","sendLargeMessageToPeer","streamDataToPeer","sendLargeMessageToSocket","hasPeer","waitForPeerConnect","handleAddPeer","addListener","waitForPeerDisconnect","handleRemovePeer","pending","chunkSize","chunks","chunk","streamDataToPeerSocket","item","sent","deletionsMessage","streamDataToPeerConnection"],"mappings":"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","sourcesContent":["// @flow\n\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { merge } from 'lodash';\nimport crypto from 'crypto';\nimport DirectedGraphMap from 'directed-graph-map';\nimport EventEmitter from 'events';\nimport farmhash from 'farmhash';\nimport LruCache from 'lru-cache';\nimport ObservedRemoveSet from 'observed-remove/set';\nimport ObservedRemoveMap from 'observed-remove/map';\nimport PQueue from 'p-queue';\nimport {\n  ActiveProviderDump,\n  BraidEvent,\n  BraidSocketEvent,\n  Credentials,\n  CredentialsResponse,\n  CustomMapDump,\n  CustomSetDump,\n  DataDump,\n  DataSyncDeletions,\n  DataSyncInsertions,\n  EventSubscribeRequest,\n  EventSubscribeResponse,\n  EventUnsubscribe,\n  MergeChunksPromise,\n  MultipartContainer,\n  PeerDump,\n  PeerRequest,\n  PeerResponse,\n  PeerSubscriptionDump,\n  PeerSync,\n  PeerSyncResponse,\n  ProviderDump,\n  PublishRequest,\n  PublishResponse,\n  PublisherClose,\n  PublisherMessage,\n  PublisherOpen,\n  PublisherPeerMessage,\n  ReceiverDump,\n  SubscribeRequest,\n  SubscribeResponse,\n  Unpublish,\n  Unsubscribe,\n  decode,\n  encode,\n  isNativeAccelerationEnabled,\n} from '@bunchtogether/braid-messagepack';\nimport {\n  hash32,\n  hash64,\n} from '@bunchtogether/hash-object';\nimport makeLogger from './lib/logger';\nimport requestIp from './lib/request-ip';\nimport PeerConnection from './peer-connection';\nimport PublisherServerManager from './publisher-server-manager';\nimport PublisherSessionManager from './publisher-session-manager';\n\nimport type {\n  UWSTemplatedApp,\n  UWSWebSocket,\n} from './uWebSockets';\n\ntype Logger = {\n  debug: (string) => *,\n  info: (string) => *,\n  warn: (string) => *,\n  error: (string) => *\n};\n\nfunction randomInteger() {\n  return crypto.randomBytes(4).readUInt32BE(0, true);\n}\n\nconst MAX_PAYLOAD_LENGTH = 100 * 1024 * 1024;\nconst MAX_BACKPRESSURE = MAX_PAYLOAD_LENGTH * 4;\n\nconst previousGenerationCredentialsResponse = Buffer.from('x0gCg6dzdWNjZXNzw6Rjb2RlzMinbWVzc2FnZdktSW52YWxpZCBtc2dwYWNrIGltcGxlbWVudGF0aW9uLCBwbGVhc2UgcmVsb2Fk', 'base64');\nconst previousGenerationReloadResponse = Buffer.from('xwsmlKZyZWxvYWSQAJA=', 'base64');\n\n/**\n * Class representing a Braid Server\n */\nclass Server extends EventEmitter {\n  /**\n   * Create a Braid Server.\n   * @param {UWSTemplatedApp} uwsServer uWebSockets.js server\n   * @param {UWSRecognizedString} websocketPattern uWebSockets.js websocket pattern\n   * @param {UWSWebSocketBehavior} websocketBehavior uWebSockets.js websocket behavior and options\n   */\n  constructor(uwsServer:UWSTemplatedApp, websocketPattern?:string = '/*', websocketBehavior?: Object = { compression: 0, closeOnBackpressureLimit: false, maxPayloadLength: MAX_PAYLOAD_LENGTH, maxBackpressure: MAX_BACKPRESSURE, idleTimeout: 56 }, options?: { id?: number } = {}) {\n    super();\n\n    this.messageHashes = new LruCache({ max: 500 });\n\n    if (typeof websocketBehavior.maxPayloadLength !== 'number') {\n      websocketBehavior.maxPayloadLength = MAX_PAYLOAD_LENGTH; // eslint-disable-line no-param-reassign\n    }\n\n    if (typeof websocketBehavior.maxBackpressure !== 'number') {\n      websocketBehavior.maxBackpressure = MAX_BACKPRESSURE; // eslint-disable-line no-param-reassign\n    }\n\n    this.maxPayloadLength = websocketBehavior.maxPayloadLength;\n    this.maxBackpressure = websocketBehavior.maxBackpressure;\n\n    // Values set using setData and deleteData are compared against hashes to prevent\n    // redundant writes\n    this.shouldDeduplicate = false;\n\n    this.recordHashes = new Map();\n    this.recordHashObjects = new Set();\n\n    // Added as a data set handler when deduplication is active\n    // A reference to the original object is temporarily added to a\n    // set to distinguish between local objects and clones of remote objects\n    // This prevents having to calculate the object hash twice\n    this.updateHashOnSet = (name:string, data:any) => {\n      if (this.recordHashObjects.has(data)) {\n        this.recordHashObjects.delete(data);\n      } else {\n        const hash = hash64(data);\n        this.recordHashes.set(name, hash);\n      }\n    };\n\n    // Added as a data delete handler when deduplication is active\n    this.updateHashOnDelete = (name:string) => {\n      this.recordHashes.delete(name);\n    };\n\n    // Multipart message container merge promises\n    //   Key: id\n    //   Value: MergeChunksPromise\n    this.mergeChunkPromises = new Map();\n\n    // Socket drain callbacks\n    //   Key: Socket ID\n    //   Value: [Array of callbacks, Array of Errbacks]\n    this.drainCallbacks = new Map();\n\n    // Primary data object, used by all peers and partially shared with subscribers\n    this.data = new ObservedRemoveMap([], { bufferPublishing: 0 });\n\n    // Peer connections map, each peer stores the peers it is connected to\n    //   Key: Peer ID\n    //   Value: Array of peer IDs\n    this.peers = new ObservedRemoveMap([], { bufferPublishing: 0 });\n\n    // Provider map, each peer stores regex strings it can provide data for\n    //   Key: Peer ID\n    //   Value: Array of regex strings\n    this.providers = new ObservedRemoveMap([], { bufferPublishing: 0 });\n\n    // Active provider map for each key\n    //   Key: key\n    //   Value: [Peer ID, regex string]\n    this.activeProviders = new ObservedRemoveMap([], { bufferPublishing: 0 });\n\n    // Receiver map, each peer stores regex strings it can receive messages from publishers for\n    //   Key: key\n    //   Value: [Peer ID, regex string]\n    this.receivers = new ObservedRemoveMap([], { bufferPublishing: 0 });\n\n    // Peers which are currently subscribed to a key\n    //   Values: [peerId, key]\n    this.peerSubscriptions = new ObservedRemoveSet([], { bufferPublishing: 0 });\n\n    // Peer subscriber map for each key\n    //   Key: key\n    //   Value: Array of Peer IDs\n    this.peerSubscriptionMap = new Map();\n\n    // Matcher functions for each provider\n    //   Key: Peer ID\n    //   Value: Array of regex strings, regex objects pairs\n    this.providerRegexes = new Map();\n\n    // Callbacks for providing / unproviding\n    //   Key: regex strings\n    //   Value: Callback function\n    this.provideCallbacks = new Map();\n\n    // Options for providing / unproviding\n    //   Key: regex strings\n    //   Value: Object\n    this.provideOptions = new Map();\n\n    // Debounce timeouts for providers\n    //   Key: key\n    //   Value: TimeoutId\n    this.provideDebounceTimeouts = new Map();\n\n    // Matcher functions for each receiver\n    //   Key: Peer ID\n    //   Value: Array of regex strings, regex objects pairs\n    this.receiverRegexes = new Map();\n\n    // Callbacks for receiving / unreceiving\n    //   Key: regex strings\n    //   Value: [Message callback function, Open callback function, Close callback function]\n    this.receiveCallbacks = new Map();\n\n    // Tracks relationships of publishing socket / key pairs to publishing servers\n    this.receiverServers = new PublisherServerManager();\n\n    // Tracks relationships of publishing socket / key pairs to publishing regexes\n    this.receiverSessions = new PublisherSessionManager();\n\n    // Tracks relationships of publishing socket / key pairs to receiving regexes\n    this.publisherSessions = new PublisherSessionManager();\n\n    // Tracks relationships of publishing socket / key pairs to receiving servers\n    this.publisherServers = new PublisherServerManager();\n\n    // Active (incoming) sockets\n    //   Key: Socket ID\n    //   Value: Socket object\n    this.sockets = new Map();\n\n    // Promise queue of incoming crendential authentication requests\n    //   Key: Socket ID\n    //   Value: Promise Queue\n    this.socketCredentialQueues = new Map();\n\n    // Map of Peer IDs to Socket IDs\n    //   Source: Socket ID\n    //   Target: Peer ID\n    this.peerSockets = new DirectedGraphMap();\n\n    // Active (outgoing) peer connections\n    //   Key: Peer ID\n    //   Value: Connection Object\n    this.peerConnections = new Map();\n\n    // Active subscriptions\n    //   Source: Socket ID\n    //   Target: Key\n    this.subscriptions = new DirectedGraphMap();\n\n    // Active publishers\n    //   Source: Socket ID\n    //   Target: Key\n    this.publishers = new DirectedGraphMap();\n\n    // Active event subscriptions\n    //   Source: Socket ID\n    //   Target: Event Name\n    this.eventSubscriptions = new DirectedGraphMap();\n\n    // Keys without subscribers that should be flushed from data\n    //   Key: key\n    //   Value: Timestamp when the key should be deleted\n    this.keysForDeletion = new Map();\n\n    // Peer reconnection timeouts\n    //   Key: Peer ID\n    //   Value: TimeoutID\n    this.peerReconnectTimeouts = new Map();\n\n    // User defined observed remove maps\n    //   Key: string\n    //   Value: ObservedRemoveMap\n    this._customMaps = new Map(); // eslint-disable-line no-underscore-dangle\n\n    // User defined observed remove sets\n    //   Key: string\n    //   Value: ObservedRemoveSet\n    this._customSets = new Map(); // eslint-disable-line no-underscore-dangle\n\n    const mapsGetter = (target:{[string]: ObservedRemoveMap<string, any>}, name:string) => {\n      const existing = this._customMaps.get(name); // eslint-disable-line no-underscore-dangle\n      if (typeof existing !== 'undefined') {\n        return existing;\n      }\n      const map = new ObservedRemoveMap([], { bufferPublishing: 0 });\n      map.on('publish', (queue:[Array<*>, Array<*>]) => {\n        this.publishToPeers(new CustomMapDump(name, queue, [this.id]));\n      });\n      this._customMaps.set(name, map); // eslint-disable-line no-underscore-dangle\n      return map;\n    };\n\n    this.maps = new Proxy({}, {\n      get: mapsGetter,\n      set() {\n        throw new TypeError('Can not set Server.maps values');\n      },\n    });\n\n    const setsGetter = (target:{[string]: ObservedRemoveSet<any>}, name:string) => {\n      const existing = this._customSets.get(name); // eslint-disable-line no-underscore-dangle\n      if (typeof existing !== 'undefined') {\n        return existing;\n      }\n      const set = new ObservedRemoveSet([], { bufferPublishing: 0 });\n      set.on('publish', (queue:[Array<*>, Array<*>]) => {\n        this.publishToPeers(new CustomSetDump(name, queue, [this.id]));\n      });\n      this._customSets.set(name, set); // eslint-disable-line no-underscore-dangle\n      return set;\n    };\n\n    this.sets = new Proxy({}, {\n      get: setsGetter,\n      set() {\n        throw new TypeError('Can not set Server.sets values');\n      },\n    });\n\n    this.id = typeof options.id === 'number' ? options.id : randomInteger();\n\n    this.logger = makeLogger(`Braid Server ${this.id}`);\n\n    this.isClosing = false;\n\n    this.flushInterval = setInterval(() => {\n      this.data.flush();\n      this.peers.flush();\n      this.providers.flush();\n      this.receivers.flush();\n      this.activeProviders.flush();\n      this.peerSubscriptions.flush();\n      for (const customMap of this._customMaps.values()) { // eslint-disable-line no-underscore-dangle\n        customMap.flush();\n      }\n    }, 10000);\n\n    this.keyFlushInterval = setInterval(() => {\n      const now = Date.now();\n      for (const [key, timestamp] of this.keysForDeletion) {\n        if (timestamp < now) {\n          this.keysForDeletion.delete(key);\n          this.data.delete(key);\n        }\n      }\n    }, 3600000);\n\n    this.setCredentialsHandler(async (credentials: Object) => // eslint-disable-line no-unused-vars\n      ({ success: true, code: 200, message: 'OK' }),\n    );\n    this.setPeerRequestHandler(async (credentials: Object) => // eslint-disable-line no-unused-vars\n      ({ success: true, code: 200, message: 'OK' }),\n    );\n    this.setSubscribeRequestHandler(async (key:string, credentials: Object) => // eslint-disable-line no-unused-vars\n      ({ success: true, code: 200, message: 'OK' }),\n    );\n    this.setEventSubscribeRequestHandler(async (name:string, credentials: Object) => // eslint-disable-line no-unused-vars\n      ({ success: true, code: 200, message: 'OK' }),\n    );\n    this.setPublishRequestHandler(async (key:string, credentials: Object) => // eslint-disable-line no-unused-vars\n      ({ success: true, code: 200, message: 'OK' }),\n    );\n    this.data.on('publish', (queue:[Array<*>, Array<*>]) => {\n      this.publishToPeers(new DataDump(queue, [this.id]));\n      this.publishData(queue);\n    });\n    this.providers.on('publish', (queue:[Array<*>, Array<*>]) => {\n      this.publishToPeers(new ProviderDump(queue, [this.id]));\n    });\n    this.activeProviders.on('publish', (queue:[Array<*>, Array<*>]) => {\n      this.publishToPeers(new ActiveProviderDump(queue, [this.id]));\n    });\n    this.receivers.on('publish', (queue:[Array<*>, Array<*>]) => {\n      this.publishToPeers(new ReceiverDump(queue, [this.id]));\n    });\n    this.peers.on('publish', (queue:[Array<*>, Array<*>]) => {\n      this.publishToPeers(new PeerDump(queue, [this.id]));\n    });\n    this.peerSubscriptions.on('publish', (queue:[Array<*>, Array<*>]) => {\n      this.publishToPeers(new PeerSubscriptionDump(queue, [this.id]));\n    });\n    this.peerSubscriptions.on('add', ([peerId, key]) => {\n      let peerIds = this.peerSubscriptionMap.get(key);\n      this.keysForDeletion.delete(key);\n      if (!peerIds) {\n        peerIds = new Set();\n        this.peerSubscriptionMap.set(key, peerIds);\n        if (!this.activeProviders.has(key)) {\n          this.assignProvider(key);\n        }\n      }\n      peerIds.add(peerId);\n      clearTimeout(this.provideDebounceTimeouts.get(key));\n      this.provideDebounceTimeouts.delete(key);\n    });\n    this.peerSubscriptions.on('delete', ([peerId, key]) => {\n      const removeActiveProvider = () => {\n        clearTimeout(this.provideDebounceTimeouts.get(key));\n        this.provideDebounceTimeouts.delete(key);\n        const peerIds = this.peerSubscriptionMap.get(key);\n        if (!peerIds) {\n          return;\n        }\n        peerIds.delete(peerId);\n        if (peerIds.size === 0) {\n          this.peerSubscriptionMap.delete(key);\n          this.activeProviders.delete(key);\n          this.keysForDeletion.set(key, Date.now() + 86400000);\n        }\n      };\n      clearTimeout(this.provideDebounceTimeouts.get(key));\n      this.provideDebounceTimeouts.delete(key);\n      const peerIdAndRegexString = this.activeProviders.get(key);\n      if (!peerIdAndRegexString) {\n        removeActiveProvider();\n        return;\n      }\n      const regexString = peerIdAndRegexString[1];\n      const provideOptions = this.provideOptions.get(regexString);\n      if (provideOptions && typeof provideOptions.debounce === 'number') {\n        this.provideDebounceTimeouts.set(key, setTimeout(removeActiveProvider, provideOptions.debounce));\n      } else {\n        removeActiveProvider();\n      }\n    });\n    this.peers.on('set', (peerId, peerIds, previousPeerIds) => {\n      if (this.id !== peerId && peerIds && previousPeerIds && peerIds.length < previousPeerIds.length) {\n        this.prunePeers();\n      }\n    });\n    this.activeProviders.on('set', (key:string, [peerId:number, regexString:string], previousPeerIdAndRegexString?: [number, string]) => {\n      if (this.id === peerId) {\n        const callback = this.provideCallbacks.get(regexString);\n        if (!callback) {\n          this.unprovide(regexString);\n          return;\n        }\n        if (!previousPeerIdAndRegexString || previousPeerIdAndRegexString[0] !== this.id) {\n          callback(key, true);\n        }\n      } else if (previousPeerIdAndRegexString) {\n        const [previousPeerId, previousRegexString] = previousPeerIdAndRegexString;\n        if (previousPeerId === peerId) {\n          return;\n        }\n        if (previousPeerId === this.id) {\n          const callback = this.provideCallbacks.get(previousRegexString);\n          if (callback) {\n            callback(key, false);\n          } else {\n            this.unprovide(previousRegexString);\n          }\n        }\n      }\n    });\n    this.activeProviders.on('delete', (key:string, [peerId:number, regexString:string]) => {\n      if (this.id === peerId) {\n        const callback = this.provideCallbacks.get(regexString);\n        if (callback) {\n          callback(key, false);\n        } else {\n          this.unprovide(regexString);\n        }\n      }\n    });\n    this.providers.on('set', (peerId:number, regexStrings:Array<string>) => {\n      const regexPairs = regexStrings.map((regexString) => [regexString, new RegExp(regexString)]);\n      this.providerRegexes.set(peerId, regexPairs);\n      if (this.id !== peerId) {\n        return;\n      }\n      const keysWithoutProviders = [...this.peerSubscriptionMap.keys()].filter((key) => !this.activeProviders.has(key));\n      for (const regexPair of regexPairs) {\n        const regex = regexPair[1];\n        for (const key of keysWithoutProviders) {\n          if (regex.test(key)) {\n            this.assignProvider(key);\n          }\n        }\n      }\n    });\n    this.providers.on('delete', (peerId:number) => {\n      this.providerRegexes.delete(peerId);\n    });\n    this.receivers.on('set', (peerId:number, regexStrings:Array<string>, previousRegexStrings?:Array<string>) => {\n      const regexMap = new Map(regexStrings.map((regexString) => [regexString, new RegExp(regexString)]));\n      this.receiverRegexes.set(peerId, regexMap);\n      if (Array.isArray(previousRegexStrings)) {\n        for (const previousRegexString of previousRegexStrings) {\n          if (regexStrings.includes(previousRegexString)) {\n            continue;\n          }\n          for (const [key, serverId, socketId] of this.publisherSessions.publishers(previousRegexString)) { // eslint-disable-line no-unused-vars\n            this.unassignReceiver(key, socketId);\n          }\n        }\n      }\n      for (const [socketId, key] of this.publishers) {\n        if (this.receiverServers.hasPublisher(key, socketId)) {\n          continue;\n        }\n        this.assignReceiver(key, socketId);\n      }\n    });\n    this.receivers.on('delete', (peerId:number) => {\n      this.receiverRegexes.delete(peerId);\n      const publishers = this.receiverServers.publishers(peerId);\n      for (const [key, socketId] of publishers) {\n        this.unassignReceiver(key, socketId);\n      }\n      for (const [socketId, key] of this.publishers) {\n        if (this.receiverServers.hasPublisher(key, socketId)) {\n          continue;\n        }\n        this.assignReceiver(key, socketId);\n      }\n    });\n    const websocketOptions = Object.assign({}, websocketBehavior, {\n      upgrade: (res, req, context) => { // eslint-disable-line no-unused-vars\n        if (this.isClosing) {\n          res.writeStatus('410');\n          res.end('Closing');\n          return;\n        }\n        try {\n          const socketId = randomInteger();\n          const socketIp = requestIp(res, req);\n          const socketOptions = {\n            id: socketId,\n            credentials: {\n              ip: socketIp,\n            },\n          };\n          res.upgrade(socketOptions, req.getHeader('sec-websocket-key'), req.getHeader('sec-websocket-protocol'), req.getHeader('sec-websocket-extensions'), context);\n          this.logger.info(`Upgraded socket at ${socketIp || 'with unknown IP'}`);\n        } catch (error) {\n          if (error.stack) {\n            this.logger.error('Error during socket upgrade:');\n            error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n          } else {\n            this.logger.error(`Error during socket upgrade: ${error.message}`);\n          }\n        }\n      },\n      drain: (ws) => {\n        const socketId = ws.id;\n        try {\n          if (!socketId) {\n            this.logger.error('Received socket drain without socket ID');\n            return;\n          }\n          const values = this.drainCallbacks.get(socketId);\n          if (typeof values === 'undefined') {\n            return;\n          }\n          const [callbacks] = values;\n          for (const callback of callbacks) {\n            callback();\n          }\n          this.drainCallbacks.delete(socketId);\n        } catch (error) {\n          if (error.stack) {\n            this.logger.error(`Error in drain callback from socket ${socketId}:`);\n            error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n          } else {\n            this.logger.error(`Error in drain callback from socket ${socketId}: ${error.message}`);\n          }\n        }\n      },\n      open: (ws) => { // eslint-disable-line no-unused-vars\n        const socketId = ws.id;\n        const { ip } = ws.credentials || {};\n        try {\n          if (!socketId) {\n            this.logger.error('Received socket open without socket ID');\n            return;\n          }\n          this.sockets.set(socketId, ws);\n          this.emit('open', socketId);\n          this.logger.info(`Opened socket at ${ip || 'unknown IP'} (${socketId})`);\n        } catch (error) {\n          if (error.stack) {\n            this.logger.error('Error during socket open:');\n            error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n          } else {\n            this.logger.error(`Error during socket open: ${error.message}`);\n          }\n        }\n      },\n      message: (ws, data, isBinary) => {\n        const socketId = ws.id;\n        try {\n          if (this.isClosing) {\n            return;\n          }\n          if (!socketId) {\n            this.logger.error('Received message without socket ID');\n            return;\n          }\n          if (!isBinary) {\n            this.logger.error(`Received non-binary message from ${ws.credentials.ip ? ws.credentials.ip : 'unknown IP'} (${socketId}): ${data.toString()}`);\n            return;\n          }\n          const message = decode(Buffer.from(data));\n          if (message instanceof DataDump || message instanceof PeerDump || message instanceof ProviderDump || message instanceof ActiveProviderDump || message instanceof ReceiverDump || message instanceof PeerSubscriptionDump || message instanceof PeerSync || message instanceof PeerSyncResponse || message instanceof BraidEvent || message instanceof BraidSocketEvent || message instanceof PublisherOpen || message instanceof PublisherClose || message instanceof PublisherPeerMessage || message instanceof MultipartContainer || message instanceof DataSyncInsertions || message instanceof DataSyncDeletions || message instanceof CustomMapDump || message instanceof CustomSetDump) {\n            if (!this.peerSockets.hasSource(socketId)) {\n              this.logger.error(`Received dump from non-peer at ${ws.credentials.ip ? ws.credentials.ip : 'unknown IP'} (${socketId})`);\n              return;\n            }\n            for (const peerId of this.peerSockets.getTargets(socketId)) {\n              this.handleMessage(message, peerId);\n            }\n          }\n          if (message instanceof Credentials) {\n            this.handleCredentialsRequest(socketId, ws.credentials, message.value);\n          } else if (message instanceof PeerRequest) {\n            this.handlePeerRequest(socketId, ws.credentials, message.value);\n          } else if (message instanceof SubscribeRequest) {\n            this.handleSubscribeRequest(socketId, ws.credentials, message.value);\n          } else if (message instanceof Unsubscribe) {\n            this.removeSubscription(socketId, message.value);\n          } else if (message instanceof EventSubscribeRequest) {\n            this.handleEventSubscribeRequest(socketId, ws.credentials, message.value);\n          } else if (message instanceof EventUnsubscribe) {\n            this.removeEventSubscription(socketId, message.value);\n          } else if (message instanceof PublishRequest) {\n            this.handlePublishRequest(socketId, ws.credentials, message.value);\n          } else if (message instanceof Unpublish) {\n            this.removePublisher(socketId, message.value);\n          } else if (message instanceof PublisherMessage) {\n            this.handlePublisherMessage(message.key, socketId, message.message);\n          }\n        } catch (error) {\n          if (error.stack) {\n            this.logger.error(`Error when receiving message from socket ${socketId}:`);\n            error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n          } else {\n            this.logger.error(`Error when receiving socket message from socket ${socketId}: ${error.message}`);\n          }\n          if (error instanceof TypeError && error.message.indexOf('currentExtensions') !== -1) {\n            if (!ws.sentPrevousGeneration) {\n              ws.sentPrevousGeneration = true; // eslint-disable-line no-param-reassign\n              ws.send(previousGenerationCredentialsResponse, true, false);\n              this.logger.info(`Sending reload event to socket ${socketId} using old messagepack version`);\n              setTimeout(() => {\n                if (this.sockets.has(socketId)) {\n                  ws.send(previousGenerationReloadResponse, true, false);\n                }\n              }, 5000);\n            }\n          }\n        }\n      },\n      close: (ws, code, data) => { // eslint-disable-line no-unused-vars\n        const socketId = ws.id;\n        try {\n          if (!socketId) {\n            this.logger.error('Received close without socket ID');\n            return;\n          }\n          this.removeSubscriptions(socketId);\n          this.removePublishers(socketId);\n          this.removeEventSubscriptions(socketId);\n          if (this.peerSockets.hasSource(socketId)) {\n            const peerIds = this.peerSockets.getTargets(socketId);\n            this.peerSockets.removeSource(socketId);\n            for (const peerId of peerIds) {\n              this.emit('removePeer', peerId);\n            }\n            this.updatePeers();\n            this.prunePeers();\n          }\n          this.sockets.delete(socketId);\n          this.logger.info(`Closed socket at ${ws.credentials.ip ? ws.credentials.ip : 'unknown IP'} (${socketId}), code ${code}`);\n          const { credentials } = ws;\n          if (credentials && credentials.client) {\n            this.emit('presence', credentials, false, socketId, false);\n          }\n          this.emit('close', socketId);\n          delete ws.id; // eslint-disable-line no-param-reassign\n          delete ws.credentials; // eslint-disable-line no-param-reassign\n        } catch (error) {\n          if (error.stack) {\n            this.logger.error(`Error when receiving close event from socket ${socketId}:`);\n            error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n          } else {\n            this.logger.error(`Error when receiving close event from socket ${socketId}: ${error.message}`);\n          }\n        }\n      },\n    });\n    uwsServer.ws(websocketPattern, websocketOptions);\n    this.setMaxListeners(0);\n    this.logger.info(`Native acceleration is ${isNativeAccelerationEnabled ? 'enabled' : 'not enabled'}`);\n  }\n\n  encode(value:any):Buffer {\n    try {\n      return encode(value);\n    } catch (error) {\n      this.logger.error(`Unable to encode ${JSON.stringify(value)}`);\n      throw error;\n    }\n  }\n\n  async handleMultipartContainer(multipartContainer:MultipartContainer, peerId: number) {\n    const existingMergeChunksPromise = this.mergeChunkPromises.get(multipartContainer.id);\n    if (typeof existingMergeChunksPromise !== 'undefined') {\n      existingMergeChunksPromise.push(multipartContainer);\n      return;\n    }\n    const mergeChunksPromise = MultipartContainer.getMergeChunksPromise(60000);\n    mergeChunksPromise.push(multipartContainer);\n    this.mergeChunkPromises.set(multipartContainer.id, mergeChunksPromise);\n    try {\n      const buffer = await mergeChunksPromise;\n      const message = decode(buffer);\n      this.handleMessage(message, peerId);\n    } catch (error) {\n      if (error.stack) {\n        this.logger.error('Unable to merge multipart message chunks:');\n        error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n      } else {\n        this.logger.error(`Unable to merge multipart message chunks: ${error.message}`);\n      }\n    } finally {\n      this.mergeChunkPromises.delete(multipartContainer.id);\n    }\n  }\n\n  async waitForDrain(socketId:number) {\n    const socket = this.sockets.get(socketId);\n    if (!socket) {\n      throw new Error(`Can wait for socket ${socketId} to drain, socket does not exist`);\n    }\n    if (socket.getBufferedAmount() > this.maxBackpressure) {\n      await new Promise((resolve, reject) => {\n        const [callbacks, errbacks] = this.drainCallbacks.get(socketId) || [[], []];\n        callbacks.push(resolve);\n        errbacks.push(reject);\n        this.drainCallbacks.set(socketId, [callbacks, errbacks]);\n      });\n    }\n  }\n\n  set(name:string, data:any) {\n    if (this.shouldDeduplicate) {\n      const hash = hash64(data);\n      if (this.recordHashes.get(name) !== hash) {\n        this.recordHashObjects.add(data);\n        this.data.set(name, data);\n        this.recordHashes.set(name, hash);\n      }\n    } else {\n      this.data.set(name, data);\n    }\n  }\n\n  delete(name:string) {\n    this.data.set(name, undefined);\n  }\n\n  get deduplicate():boolean {\n    return this.shouldDeduplicate;\n  }\n\n  set deduplicate(active:boolean) {\n    if (typeof active !== 'boolean') {\n      throw new TypeError(`Unable to set deduplicate to type ${typeof active}`);\n    }\n    if (active === this.shouldDeduplicate) {\n      return;\n    }\n    if (active) {\n      this.data.on('set', this.updateHashOnSet);\n      this.data.on('delete', this.updateHashOnDelete);\n    } else {\n      this.data.off('set', this.updateHashOnSet);\n      this.data.off('delete', this.updateHashOnDelete);\n    }\n    this.shouldDeduplicate = active;\n  }\n\n  emitToClients(name: string, ...args:Array<any>) {\n    const id = uuidv4();\n    this.publishEvent(name, args, id);\n    this.publishToPeers(new BraidEvent(name, args, id, [this.id]));\n  }\n\n  emitToSocket(name: string, peerId:number, socketId:number, ...args:Array<any>) {\n    const id = uuidv4();\n    if (this.id === peerId) {\n      this.publishSocketEvent(name, args, socketId, id);\n    } else {\n      this.publishToPeers(new BraidSocketEvent(name, args, peerId, socketId, id, [this.id]));\n    }\n  }\n\n  /**\n   * Throw an error if any internal data exists. Intended for tests and debugging.\n   * @return {void}\n   */\n  throwOnLeakedReferences() {\n    if (this.sockets.size > 0) {\n      throw new Error(`${this.id}: ${this.sockets.size} referenced sockets`);\n    }\n    if (this.peerSockets.size > 0) {\n      throw new Error(`${this.id}: ${this.peerSockets.size} referenced peer sockets`);\n    }\n    if (this.peerConnections.size > 0) {\n      throw new Error(`${this.id}: ${this.peerConnections.size} referenced peer connections`);\n    }\n    if (this.peers.size > 0) {\n      throw new Error(`${this.id}: ${this.peers.size} referenced peers`);\n    }\n    if (this.providers.size > 0) {\n      throw new Error(`${this.id}: ${this.providers.size} referenced providers`);\n    }\n    if (this.providerRegexes.size > 0) {\n      throw new Error(`${this.id}: ${this.providerRegexes.size} referenced provider regexes`);\n    }\n    if (this.subscriptions.size > 0) {\n      throw new Error(`${this.id}: ${this.subscriptions.size} referenced subscribers`);\n    }\n    if (this.eventSubscriptions.size > 0) {\n      throw new Error(`${this.id}: ${this.eventSubscriptions.size} referenced event subscribers`);\n    }\n    if (this.peerSubscriptions.size > 0) {\n      throw new Error(`${this.id}: ${this.peerSubscriptions.size} referenced peer subscription`);\n    }\n    if (this.activeProviders.size > 0) {\n      throw new Error(`${this.id}: ${this.activeProviders.size} referenced active providers`);\n    }\n    if (this.provideCallbacks.size > 0) {\n      throw new Error(`${this.id}: ${this.provideCallbacks.size} referenced provide callbacks`);\n    }\n    if (this.provideOptions.size > 0) {\n      throw new Error(`${this.id}: ${this.provideOptions.size} referenced provide options`);\n    }\n    if (this.provideDebounceTimeouts.size > 0) {\n      throw new Error(`${this.id}: ${this.provideDebounceTimeouts.size} referenced provide debounce timeouts`);\n    }\n    if (this.publishers.size > 0) {\n      throw new Error(`${this.id}: ${this.publishers.size} referenced publishers`);\n    }\n    if (this.receivers.size > 0) {\n      throw new Error(`${this.id}: ${this.receivers.size} referenced receivers`);\n    }\n    if (this.receiverRegexes.size > 0) {\n      throw new Error(`${this.id}: ${this.receiverRegexes.size} referenced receiver regexes`);\n    }\n    if (this.receiveCallbacks.size > 0) {\n      throw new Error(`${this.id}: ${this.receiveCallbacks.size} referenced receiver callbacks`);\n    }\n    if (this.receiverServers.size > 0) {\n      throw new Error(`${this.id}: ${this.receiverServers.size} referenced active receivers`);\n    }\n    if (this.receiverSessions.size > 0) {\n      throw new Error(`${this.id}: ${this.receiverSessions.size} referenced receive sessions`);\n    }\n    if (this.publisherServers.size > 0) {\n      throw new Error(`${this.id}: ${this.publisherServers.size} referenced publisher servers`);\n    }\n    if (this.publisherSessions.size > 0) {\n      throw new Error(`${this.id}: ${this.publisherSessions.size} referenced publisher sessions`);\n    }\n  }\n\n  /**\n   * Publish objects to peers.\n   * @param {ProviderDump|DataDump|ActiveProviderDump|ReceiverDump|PeerDump|PeerSubscriptionDump} obj - Object to send, should have \"ids\" property\n   * @return {void}\n   */\n  publishToPeers(obj:ProviderDump|DataDump|ActiveProviderDump|ReceiverDump|PeerDump|PeerSubscriptionDump|BraidEvent|BraidSocketEvent|CustomMapDump|CustomSetDump) {\n    const peerIds = obj.ids;\n    const peerConnections = [];\n    const peerUWSSockets = [];\n    for (const [socketId, peerId] of this.peerSockets.edges) {\n      if (peerIds.includes(peerId)) {\n        continue;\n      }\n      const ws = this.sockets.get(socketId);\n      if (!ws) {\n        continue;\n      }\n      peerIds.push(peerId);\n      peerUWSSockets.push(ws);\n    }\n    for (const [peerId, { ws }] of this.peerConnections) {\n      if (peerIds.includes(peerId)) {\n        continue;\n      }\n      if (ws.readyState === 1) {\n        peerIds.push(peerId);\n        peerConnections.push(ws);\n      }\n    }\n    if (peerConnections.length === 0 && peerUWSSockets.length === 0) {\n      return;\n    }\n    const encoded = this.encode(obj);\n    for (const ws of peerConnections) {\n      ws.send(encoded);\n    }\n    for (const ws of peerUWSSockets) {\n      ws.send(encoded, true, false);\n    }\n  }\n\n  /**\n   * Send objects to a peer.\n   * @param {string} peerId - Peer ID to send to\n   * @param {PublisherOpen|PublisherClose|PublisherPeerMessage} obj - Object to send\n   * @return {void}\n   */\n  sendToPeer(peerId:number, obj:PublisherOpen|PublisherClose|PublisherPeerMessage) {\n    const encoded = this.encode(obj);\n    const peerConnection = this.peerConnections.get(peerId);\n    if (peerConnection) {\n      const { ws } = peerConnection;\n      ws.send(encoded);\n      return;\n    }\n    for (const socketId of this.peerSockets.getSources(peerId)) {\n      const ws = this.sockets.get(socketId);\n      if (ws) {\n        ws.send(encoded, true, false);\n      }\n    }\n  }\n\n  /**\n   * Set the credentials handler. The handler evaluates and modifies credentials provided by peers and clients when they are initially provided.\n   * @param {(credentials: Object) => Promise<{ success: boolean, code: number, message: string }>} func - Credentials handler.\n   * @return {void}\n   */\n  setCredentialsHandler(func: (credentials: Object) => Promise<{ success: boolean, code: number, message: string }>) { // eslint-disable-line no-unused-vars\n    this.credentialsHandler = func;\n  }\n\n  /**\n   * Set the peer request handler. Approves or denies peer request handlers.\n   * @param {(credentials: Object) => Promise<{ success: boolean, code: number, message: string }>} func - Peer request handler.\n   * @return {void}\n   */\n  setPeerRequestHandler(func: (credentials: Object) => Promise<{ success: boolean, code: number, message: string }>) { // eslint-disable-line no-unused-vars\n    this.peerRequestHandler = func;\n  }\n\n  /**\n   * Set the subscribe request handler. Approves or denies subscribe requests.\n   * @param {(credentials: Object) => Promise<{ success: boolean, code: number, message: string }>} func - Subscription request handler.\n   * @return {void}\n   */\n  setSubscribeRequestHandler(func: (key:string, credentials: Object) => Promise<{ success: boolean, code: number, message: string }>) { // eslint-disable-line no-unused-vars\n    this.subscribeRequestHandler = func;\n  }\n\n  /**\n   * Set the event subscribe request handler. Approves or denies event subscribe requests.\n   * @param {(credentials: Object) => Promise<{ success: boolean, code: number, message: string }>} func - Event subscription request handler.\n   * @return {void}\n   */\n  setEventSubscribeRequestHandler(func: (name:string, credentials: Object) => Promise<{ success: boolean, code: number, message: string }>) { // eslint-disable-line no-unused-vars\n    this.eventSubscribeRequestHandler = func;\n  }\n\n  /**\n   * Set the publish request handler. Approves or denies publish requests.\n   * @param {(credentials: Object) => Promise<{ success: boolean, code: number, message: string }>} func - Publish request handler.\n   * @return {void}\n   */\n  setPublishRequestHandler(func: (key:string, credentials: Object) => Promise<{ success: boolean, code: number, message: string }>) { // eslint-disable-line no-unused-vars\n    this.publishRequestHandler = func;\n  }\n\n  /**\n   * Top level handler for incoming credentials messages. Uses the default/custom credentialsHandler method to validate.\n   * @param {number} socketId Socket ID from which the credentials were received\n   * @param {Object} credentials Credentials object\n   * @param {Object} newClientCredentials Credentials object provided by the client\n   * @return {void}\n   */\n  handleCredentialsRequest(socketId: number, credentials: Object, newClientCredentials: Object) {\n    const queue = this.socketCredentialQueues.get(socketId);\n    if (typeof queue !== 'undefined') {\n      queue.add(() => this._handleCredentialsRequest(socketId, credentials, newClientCredentials)); // eslint-disable-line no-underscore-dangle\n      return;\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    newQueue.add(() => this._handleCredentialsRequest(socketId, credentials, newClientCredentials)); // eslint-disable-line no-underscore-dangle\n    this.socketCredentialQueues.set(socketId, newQueue);\n    newQueue.onIdle().then(() => {\n      this.socketCredentialQueues.delete(socketId);\n    });\n  }\n\n  async _handleCredentialsRequest(socketId: number, credentials: Object, newClientCredentials: Object) {\n    const credentialsDidUpdate = !!credentials.client;\n    if (credentialsDidUpdate) {\n      this.emit('presence', credentials, false, socketId, credentialsDidUpdate);\n      // Wait a tick for presence events\n      await new Promise((resolve) => setImmediate(resolve));\n    }\n    const clientCredentials = credentials.client;\n    if (typeof clientCredentials === 'undefined') {\n      credentials.client = newClientCredentials; // eslint-disable-line  no-param-reassign\n    } else {\n      for (const key of Object.getOwnPropertyNames(clientCredentials)) {\n        delete clientCredentials[key];\n      }\n      merge(clientCredentials, newClientCredentials);\n    }\n    let response;\n    try {\n      response = await this.credentialsHandler(credentials);\n    } catch (error) {\n      if (error.stack) {\n        this.logger.error('Credentials request handler error:');\n        error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n      } else {\n        this.logger.error(`Credentials request handler error: ${error.message}`);\n      }\n      response = { success: false, code: 500, message: 'Credentials request handler error' };\n    }\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      this.logger.error(`Cannot respond to credentials request from socket ID ${socketId}, socket does not exist`);\n      return;\n    }\n    if (response.success) {\n      this.logger.info(`Credentials from ${ws.credentials && ws.credentials.ip ? ws.credentials.ip : 'with unknown IP'} (${socketId}) accepted`);\n      this.emit('presence', credentials, true, socketId, credentialsDidUpdate);\n    } else {\n      this.logger.info(`Credentials from ${ws.credentials && ws.credentials.ip ? ws.credentials.ip : 'with unknown IP'} (${socketId}) rejected`);\n    }\n    const unencoded = new CredentialsResponse({ success: response.success, code: response.code, message: response.message });\n    ws.send(this.encode(unencoded), true, false);\n  }\n\n  /**\n   * Top level handler for incoming peer request messages. Uses the default/custom peerRequestHandler method to validate.\n   * @param {number} socketId Socket ID from which the request was received\n   * @param {Object} credentials Credentials object\n   * @param {Object} peerId Peer ID provided by the client\n   * @return {void}\n   */\n  async handlePeerRequest(socketId: number, credentials: Object, peerId:number) {\n    if (this.peerConnections.has(peerId)) {\n      const wsA = this.sockets.get(socketId);\n      if (!wsA) {\n        this.logger.error(`Cannot respond to peer request from socket ID ${socketId}, socket does not exist`);\n        return;\n      }\n      this.logger.warn(`Peer request from ${wsA.credentials && wsA.credentials.ip ? wsA.credentials.ip : 'with unknown IP'} (${socketId}) rejected, connection to peer ${peerId} already exists`);\n      const unencoded = new PeerResponse({ id: this.id, success: false, code: 801, message: `Connection to peer ${peerId} already exists` });\n      wsA.send(this.encode(unencoded), true, false);\n      return;\n    }\n    if (this.peerSockets.hasTarget(peerId)) {\n      const wsA = this.sockets.get(socketId);\n      if (!wsA) {\n        this.logger.error(`Cannot respond to peer request from socket ID ${socketId}, socket does not exist`);\n        return;\n      }\n      this.logger.warn(`Peer request from ${wsA.credentials && wsA.credentials.ip ? wsA.credentials.ip : 'with unknown IP'} (${socketId}) rejected, connection to peer ${peerId} already exists`);\n      const unencoded = new PeerResponse({ id: this.id, success: false, code: 802, message: `Socket to peer ${peerId} already exists` });\n      wsA.send(this.encode(unencoded), true, false);\n      return;\n    }\n    await this.waitForSocketCredentialQueue(socketId);\n    let response;\n    try {\n      response = await this.peerRequestHandler(credentials);\n    } catch (error) {\n      if (error.stack) {\n        this.logger.error('Peer request handler error:');\n        error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n      } else {\n        this.logger.error(`Peer request handler error: ${error.message}`);\n      }\n      response = { success: false, code: 500, message: 'Peer request handler error' };\n    }\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      this.logger.error(`Cannot respond to peer request from socket ID ${socketId}, socket does not exist`);\n      return;\n    }\n    if (response.success) {\n      const unencoded = new PeerResponse({ id: this.id, success: true, code: response.code, message: response.message });\n      this.addPeer(socketId, peerId);\n      ws.send(this.encode(unencoded), true, false);\n      // Reset local values so they don't get overwritten on OR map sync\n      this.providers.set(this.id, [...this.provideCallbacks.keys()]);\n      this.receivers.set(this.id, [...this.receiveCallbacks.keys()]);\n      for (const key of this.subscriptions.targets) {\n        this.peerSubscriptions.add([this.id, key]);\n      }\n      this.syncPeerSocket(socketId, peerId);\n    } else {\n      const unencoded = new PeerResponse({ success: false, code: response.code, message: response.message });\n      ws.send(this.encode(unencoded), true, false);\n    }\n  }\n\n  /**\n   * Top level handler for incoming subscribe request messages. Uses the default/custom subscribeRequestHandler method to validate.\n   * @param {number} socketId Socket ID from which the request was received\n   * @param {Object} credentials Credentials object\n   * @param {string} key Key the subscriber is requesting updates on\n   * @return {void}\n   */\n  async handleSubscribeRequest(socketId:number, credentials:Object, key:string) {\n    await this.waitForSocketCredentialQueue(socketId);\n    let response;\n    try {\n      response = await this.subscribeRequestHandler(key, credentials);\n    } catch (error) {\n      if (error.stack) {\n        this.logger.error('Subscribe request handler error:');\n        error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n      } else {\n        this.logger.error(`Subscribe request handler error: ${error.message}`);\n      }\n      response = { success: false, code: 500, message: 'Subscribe request handler error' };\n    }\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      this.logger.error(`Cannot respond to subscribe request from socket ID ${socketId}, socket does not exist`);\n      return;\n    }\n    if (response.success) {\n      this.addSubscription(socketId, key);\n    }\n    const unencoded = new SubscribeResponse({ key, success: response.success, code: response.code, message: response.message });\n    ws.send(this.encode(unencoded), true, false);\n  }\n\n  /**\n   * Top level handler for incoming event subscribe request messages. Uses the default/custom eventSubscribeRequestHandler method to validate.\n   * @param {number} socketId Socket ID from which the request was received\n   * @param {Object} credentials Credentials object\n   * @param {string} name Event name the subscriber is requesting updates on\n   * @return {void}\n   */\n  async handleEventSubscribeRequest(socketId:number, credentials:Object, name:string) {\n    await this.waitForSocketCredentialQueue(socketId);\n    let response;\n    try {\n      response = await this.eventSubscribeRequestHandler(name, credentials);\n    } catch (error) {\n      if (error.stack) {\n        this.logger.error('Event subscribe request handler error:');\n        error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n      } else {\n        this.logger.error(`Event subscribe request handler error: ${error.message}`);\n      }\n      response = { success: false, code: 500, message: 'Event subscribe request handler error' };\n    }\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      this.logger.error(`Cannot respond to event subscribe request from socket ID ${socketId}, socket does not exist`);\n      return;\n    }\n    if (response.success) {\n      this.addEventSubscription(socketId, name);\n    }\n    const unencoded = new EventSubscribeResponse({ name, success: response.success, code: response.code, message: response.message });\n    ws.send(this.encode(unencoded), true, false);\n  }\n\n  /**\n   * Top level handler for incoming publish request messages. Uses the default/custom publishRequestHandler method to validate.\n   * @param {number} socketId Socket ID from which the request was received\n   * @param {Object} credentials Credentials object\n   * @param {string} key Key the publisher is requesting to publish to\n   * @return {void}\n   */\n  async handlePublishRequest(socketId:number, credentials:Object, key:string) {\n    await this.waitForSocketCredentialQueue(socketId);\n    let response;\n    try {\n      response = await this.publishRequestHandler(key, credentials);\n    } catch (error) {\n      if (error.stack) {\n        this.logger.error('Publish request handler error:');\n        error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n      } else {\n        this.logger.error(`Publish request handler error: ${error.message}`);\n      }\n      response = { success: false, code: 500, message: 'Publish request handler error' };\n    }\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      this.logger.error(`Cannot respond to publish request from socket ID ${socketId}, socket does not exist`);\n      return;\n    }\n    if (response.success) {\n      this.addPublisher(socketId, key);\n    }\n    const unencoded = new PublishResponse({ key, success: response.success, code: response.code, message: response.message });\n    ws.send(this.encode(unencoded), true, false);\n  }\n\n  /**\n   * Top level message handler, used by both sockets and connections.\n   * @param {DataDump|ProviderDump|ActiveProviderDump|PeerDump|PeerSubscriptionDump|PeerSync|PeerSyncResponse|BraidEvent} message Message to handle\n   * @return {void}\n   */\n  handleMessage(message:DataDump|ProviderDump|ActiveProviderDump|ReceiverDump|PeerDump|PeerSubscriptionDump|PeerSync|PeerSyncResponse|BraidEvent|BraidSocketEvent|PublisherOpen|PublisherClose|PublisherPeerMessage|MultipartContainer|DataSyncInsertions|DataSyncDeletions|CustomMapDump|CustomSetDump, peerId:number) {\n    if (message instanceof DataSyncInsertions) {\n      this.data.process([message.insertions, []], true);\n      return;\n    } else if (message instanceof DataSyncDeletions) {\n      this.data.process([[], message.deletions], true);\n      return;\n    } else if (message instanceof MultipartContainer) {\n      this.handleMultipartContainer(message, peerId);\n      return;\n    } else if (message instanceof PeerSync) {\n      this.handlePeerSync(message);\n      return;\n    } else if (message instanceof PeerSyncResponse) {\n      this.emit('peerSyncResponse', message.value);\n      return;\n    } else if (message instanceof BraidSocketEvent) {\n      if (this.messageHashes.has(message.id)) {\n        return;\n      }\n      this.messageHashes.set(message.id, true);\n      if (this.id === message.peerId) {\n        this.publishSocketEvent(message.name, message.args, message.socketId, message.id);\n      } else {\n        this.publishToPeers(message);\n      }\n      return;\n    } else if (message instanceof BraidEvent) {\n      if (this.messageHashes.has(message.id)) {\n        return;\n      }\n      this.messageHashes.set(message.id, true);\n      this.publishEvent(message.name, message.args, message.id);\n      this.publishToPeers(message);\n      return;\n    } else if (message instanceof PublisherOpen) {\n      this.handlePublisherOpen(message.regexString, message.key, message.serverId, message.socketId, message.credentials);\n      return;\n    } else if (message instanceof PublisherClose) {\n      this.handlePublisherClose(message.key, message.serverId, message.socketId);\n      return;\n    } else if (message instanceof PublisherPeerMessage) {\n      this.handlePublisherPeerMessage(message.key, message.serverId, message.socketId, message.message);\n      return;\n    }\n    const hash = hash32(message.queue);\n    if (this.messageHashes.has(hash)) {\n      return;\n    }\n    this.messageHashes.set(hash, true);\n    if (message instanceof DataDump) {\n      this.data.process(message.queue, true);\n      this.publishData(message.queue);\n    } else if (message instanceof PeerSubscriptionDump) {\n      this.peerSubscriptions.process(message.queue, true);\n    } else if (message instanceof ProviderDump) {\n      this.providers.process(message.queue, true);\n    } else if (message instanceof ActiveProviderDump) {\n      this.activeProviders.process(message.queue, true);\n    } else if (message instanceof ReceiverDump) {\n      this.receivers.process(message.queue, true);\n    } else if (message instanceof PeerDump) {\n      this.peers.process(message.queue, true);\n    } else if (message instanceof CustomMapDump) {\n      const customMap = this.maps[message.name]; // eslint-disable-line no-underscore-dangle\n      if (typeof customMap !== 'undefined') {\n        customMap.process(message.queue, true);\n      }\n    } else if (message instanceof CustomSetDump) {\n      const customSet = this.sets[message.name]; // eslint-disable-line no-underscore-dangle\n      if (typeof customSet !== 'undefined') {\n        customSet.process(message.queue, true);\n      }\n    }\n    this.publishToPeers(message);\n  }\n\n  /**\n   * Publish event to subscribers.\n   * @param {BraidEvent} Event object\n   * @return {void}\n   */\n  publishEvent(name:string, args:Array<any>, id:string) {\n    let encoded;\n    for (const socketId of this.eventSubscriptions.getSources(name)) {\n      const ws = this.sockets.get(socketId);\n      if (!ws) {\n        throw new Error(`Can not publish data to event subscriber ${socketId}, socket does not exist`);\n      }\n      if (!encoded) {\n        const subscriberEvent = new BraidEvent(name, args, id, []);\n        encoded = this.encode(subscriberEvent);\n      }\n      ws.send(encoded, true, false);\n    }\n  }\n\n  /**\n   * Publish event to subscribers.\n   * @param {BraidEvent} Event object\n   * @return {void}\n   */\n  publishSocketEvent(name:string, args:Array<any>, socketId: number, id:string) {\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      throw new Error(`Can not publish data to event subscriber ${socketId}, socket does not exist`);\n    }\n    const subscriberEvent = new BraidEvent(name, args, id, []);\n    ws.send(this.encode(subscriberEvent), true, false);\n  }\n\n  /**\n   * Publish data to subscribers.\n   * @param {[Array<*>, Array<*>]} Data dump queue.\n   * @return {void}\n   */\n  publishData(queue:[Array<*>, Array<*>]) {\n    const insertions = new Map();\n    const deletions = new Map();\n    const subscriptionMap = new Map();\n    for (const [key, valuePair] of queue[0]) {\n      insertions.set(key, valuePair);\n      for (const socketId of this.subscriptions.getSources(key)) {\n        let subscriptions = subscriptionMap.get(socketId);\n        if (!subscriptions) {\n          subscriptions = new Set();\n          subscriptionMap.set(socketId, subscriptions);\n        }\n        subscriptions.add(key);\n      }\n    }\n    for (const [valueId, key] of queue[1]) {\n      deletions.set(key, valueId);\n      for (const socketId of this.subscriptions.getSources(key)) {\n        let subscriptions = subscriptionMap.get(socketId);\n        if (!subscriptions) {\n          subscriptions = new Set();\n          subscriptionMap.set(socketId, subscriptions);\n        }\n        subscriptions.add(key);\n      }\n    }\n    for (const [socketId, keys] of subscriptionMap) {\n      const ws = this.sockets.get(socketId);\n      if (!ws) {\n        throw new Error(`Can not publish data to subscriber ${socketId}, socket does not exist`);\n      }\n      const insertionQueue = [];\n      const deletionQueue = [];\n      for (const key of keys) {\n        const valuePair = insertions.get(key);\n        if (valuePair) {\n          insertionQueue.push([key, valuePair]);\n        }\n        const valueId = deletions.get(key);\n        if (valueId) {\n          deletionQueue.push([valueId, key]);\n        }\n      }\n      ws.send(this.encode(new DataDump([insertionQueue, deletionQueue])), true, false);\n    }\n  }\n\n  /**\n   * Add an event subscription to a socket.\n   * @param {number} socketId Socket ID of the subscriber\n   * @param {string} name Name of the event to send\n   * @return {void}\n   */\n  addEventSubscription(socketId:number, name:string) {\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      throw new Error(`Can not add event subscriber with socket ID ${socketId} for name ${name}, socket does not exist`);\n    }\n    this.eventSubscriptions.addEdge(socketId, name);\n  }\n\n  /**\n   * Remove a subscription from a socket.\n   * @param {number} socketId Socket ID of the subscriber\n   * @param {string} name Name on which the subscriber should stop receiving events\n   * @return {void}\n   */\n  removeEventSubscription(socketId:number, name:string) {\n    this.eventSubscriptions.removeEdge(socketId, name);\n  }\n\n  /**\n   * Remove all subscriptions from a socket, for example after the socket disconnects\n   * @param {number} socketId Socket ID of the subscriber\n   * @return {void}\n   */\n  removeEventSubscriptions(socketId:number) {\n    for (const name of this.eventSubscriptions.getTargets(socketId)) {\n      this.removeEventSubscription(socketId, name);\n    }\n  }\n\n  /**\n   * Add a publisher socket to a receiver.\n   * @param {number} socketId Socket ID of the publisher\n   * @param {string} key Key to receive publisher messages\n   * @return {void}\n   */\n  addPublisher(socketId:number, key:string) {\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      throw new Error(`Can not add publisher with socket ID ${socketId} for key ${key}, socket does not exist`);\n    }\n    this.publishers.addEdge(socketId, key);\n    this.assignReceiver(key, socketId);\n  }\n\n  /**\n   * Remove a publisher socket from a receiver.\n   * @param {number} socketId Socket ID of the publisher\n   * @param {string} key Key on which the publisher should stop sending updates\n   * @return {void}\n   */\n  removePublisher(socketId:number, key:string) {\n    this.publishers.removeEdge(socketId, key);\n    this.unassignReceiver(key, socketId);\n  }\n\n  /**\n   * Remove all receivers from a publisher socket, for example after the socket disconnects\n   * @param {number} socketId Socket ID of the publisher\n   * @return {void}\n   */\n  removePublishers(socketId:number) {\n    for (const key of this.publishers.getTargets(socketId)) {\n      this.removePublisher(socketId, key);\n    }\n  }\n\n  /**\n   * Add a subscription to a socket.\n   * @param {number} socketId Socket ID of the subscriber\n   * @param {string} key Key to provide the subscriber with updates\n   * @return {void}\n   */\n  addSubscription(socketId:number, key:string) {\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      throw new Error(`Can not add subscriber with socket ID ${socketId} for key ${key}, socket does not exist`);\n    }\n    this.subscriptions.addEdge(socketId, key);\n    this.peerSubscriptions.add([this.id, key]);\n    const pair = this.data.pairs.get(key);\n    if (pair) {\n      const insertionQueue = typeof pair[1] === 'undefined' ? [[key, [pair[0]]]] : [[key, pair]];\n      ws.send(this.encode(new DataDump([insertionQueue, []])), true, false);\n    }\n  }\n\n  /**\n   * Remove a subscription from a socket.\n   * @param {number} socketId Socket ID of the subscriber\n   * @param {string} key Key on which the subscriber should stop receiving updates\n   * @return {void}\n   */\n  removeSubscription(socketId:number, key:string) {\n    this.subscriptions.removeEdge(socketId, key);\n    if (this.subscriptions.getSources(key).size === 0) {\n      this.peerSubscriptions.delete([this.id, key]);\n    }\n  }\n\n  /**\n   * Remove all subscriptions from a socket, for example after the socket disconnects\n   * @param {number} socketId Socket ID of the subscriber\n   * @return {void}\n   */\n  removeSubscriptions(socketId:number) {\n    for (const key of this.subscriptions.getTargets(socketId)) {\n      this.removeSubscription(socketId, key);\n    }\n  }\n\n  /**\n   * Assign a provider to a key.\n   * @param {string} key Key to provide peers with updates, which peers will then disseminate to subscribers\n   * @return {void}\n   */\n  assignProvider(key:string) {\n    if (this.activeProviders.has(key)) {\n      return;\n    }\n    if (!this.peerSubscriptionMap.has(key)) {\n      return;\n    }\n    const peerIdAndRegexStrings = [];\n    for (const [peerId, regexes] of this.providerRegexes) {\n      for (const [regexString, regex] of regexes) {\n        if (regex.test(key)) {\n          peerIdAndRegexStrings.push([peerId, regexString]);\n          break;\n        }\n      }\n    }\n    if (peerIdAndRegexStrings.length === 0) {\n      this.logger.warn(`Unable to find provider for \"${key}\"`);\n      return;\n    }\n    peerIdAndRegexStrings.sort((x, y) => (x[0] === y[0] ? (x[1] > y[1] ? 1 : -1) : (x[0] > y[0] ? 1 : -1)));\n    const peerIdAndRegexString = peerIdAndRegexStrings[farmhash.hash32(key) % peerIdAndRegexStrings.length];\n    this.activeProviders.set(key, peerIdAndRegexString);\n  }\n\n  /**\n   * Indicate this server instance is providing for keys matching the regex string.\n   * @param {string} regexString Regex to match keys with\n   * @param {(key:string, active:boolean) => void} callback Callback function, called when a provider should start or stop providing values\n   * @return {void}\n   */\n  provide(regexString:string, callback: (key:string, active:boolean) => void|Promise<void>, options?: {debounce?: number} = {}) {\n    const regexStrings = new Set(this.providers.get(this.id));\n    regexStrings.add(regexString);\n    this.provideCallbacks.set(regexString, callback);\n    this.provideOptions.set(regexString, options);\n    this.providers.set(this.id, [...regexStrings]);\n  }\n\n  /**\n   * Indicate this server instance is no longer providing for keys matching the regex string.\n   * @param {string} regexString Regex to match keys with\n   * @param {(key:string, active:boolean) => void} callback Callback function, called when a provider should start or stop providing values\n   * @return {void}\n   */\n  unprovide(regexString:string) {\n    const regexStrings = new Set(this.providers.get(this.id));\n    regexStrings.delete(regexString);\n    this.provideCallbacks.delete(regexString);\n    this.provideOptions.delete(regexString);\n    if (regexStrings.size > 0) {\n      this.providers.set(this.id, [...regexStrings]);\n    } else {\n      this.providers.delete(this.id);\n    }\n    for (const [key, [peerId, activeRegexString]] of this.activeProviders) {\n      if (regexString === activeRegexString && peerId === this.id) {\n        this.activeProviders.delete(key);\n        this.assignProvider(key);\n      }\n    }\n  }\n\n  /**\n   * Assign a receiver to a key.\n   * @param {string} key Key to for a socket to publish to, which peers will then disseminate to recivers\n\n   * @return {void}\n   */\n  assignReceiver(key:string, socketId: number) {\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      this.logger.error(`Cannot assign \"${key}\" receiver for ${socketId}, socket does not exist`);\n      return;\n    }\n    const { credentials } = ws;\n    const peerIdWithRegexes = [];\n    for (const [peerId, regexMap] of this.receiverRegexes) {\n      for (const [regexString, regex] of regexMap) { // eslint-disable-line no-unused-vars\n        if (regex.test(key)) {\n          if (this.id === peerId) {\n            this.publisherSessions.add(key, this.id, socketId, regexString);\n            this.receiverServers.add(key, socketId, this.id);\n            this.handlePublisherOpen(regexString, key, this.id, socketId, credentials);\n            return;\n          }\n          peerIdWithRegexes.push([peerId, regexString]);\n          break;\n        }\n      }\n    }\n    if (peerIdWithRegexes.length === 0) {\n      this.logger.warn(`Unable to find receiver for \"${key}\"`);\n      return;\n    }\n    const [activePeerId, regexString] = peerIdWithRegexes[Math.floor(Math.random() * peerIdWithRegexes.length)];\n    this.publisherSessions.add(key, activePeerId, socketId, regexString);\n    this.receiverServers.add(key, socketId, activePeerId);\n    this.sendToPeer(activePeerId, new PublisherOpen(regexString, key, this.id, socketId, credentials));\n  }\n\n  /**\n   * Unassign a receiver to a key.\n   * @param {string} key Key that the socket was publishing to\n\n   * @return {void}\n   */\n  unassignReceiver(key:string, socketId: number) {\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      this.logger.error(`Cannot unassign \"${key}\" receiver for ${socketId}, socket does not exist`);\n      return;\n    }\n    const serverIds = this.receiverServers.servers(key, socketId);\n    this.receiverServers.removePublisher(key, socketId);\n    for (const serverId of serverIds) {\n      this.publisherSessions.removePublisher(key, serverId, socketId);\n      if (this.id === serverId) {\n        this.handlePublisherClose(key, this.id, socketId);\n      } else {\n        this.sendToPeer(serverId, new PublisherClose(key, this.id, socketId));\n      }\n    }\n    if (serverIds.length === 0) {\n      this.logger.warn(`Unable to unassign receiver for socket ${socketId} with key \"${key}\"`);\n    }\n  }\n\n  /**\n   * Top level publisher open handler\n   * @param {string} key Key the socket is publishing to\n   * @param {number} socketId Socket ID of the peer\n   * @param {Object} credentials Credentials object\n   * @return {void}\n   */\n  handlePublisherOpen(regexString:string, key:string, serverId:number, socketId:number, credentials:Object) {\n    const regexMap = this.receiverRegexes.get(this.id);\n    if (!regexMap) {\n      this.logger.warn(`Unable to find matching receiver regexes for \"${key}\"`);\n      return;\n    }\n    if (!regexMap.has(regexString)) {\n      this.logger.warn(`Unable to find matching receiver regex \"${regexString}\" for \"${key}\"`);\n      return;\n    }\n    const callbacks = this.receiveCallbacks.get(regexString);\n    if (!callbacks) {\n      this.logger.warn(`Unable to find matching receiver callbacks for \"${regexString}\"`);\n      return;\n    }\n    this.publisherServers.add(key, socketId, serverId);\n    this.receiverSessions.add(key, serverId, socketId, regexString);\n    const openCallback = callbacks[1];\n    if (typeof openCallback === 'function') {\n      openCallback(key, serverId, socketId, credentials);\n    }\n  }\n\n  /**\n   * Top level publisher close handler\n   * @param {string} key Key the socket is publishing to\n   * @param {number} socketId Socket ID of the peer\n   * @return {void}\n   */\n  handlePublisherClose(key:string, serverId:number, socketId:number) {\n    const regexStrings = this.receiverSessions.regexes(key, serverId, socketId);\n    this.publisherServers.removePublisher(key, socketId);\n    this.receiverSessions.removePublisher(key, serverId, socketId);\n    for (const regexString of regexStrings) {\n      const callbacks = this.receiveCallbacks.get(regexString);\n      if (!callbacks) {\n        continue;\n      }\n      const closeCallback = callbacks[2];\n      if (typeof closeCallback === 'function') {\n        closeCallback(key, serverId, socketId);\n        return;\n      }\n    }\n    this.logger.warn(`Unable to find receive session callbacks for \"${key}\" and server ${serverId}, socket ${socketId}`);\n  }\n\n  handlePublisherMessage(key:string, socketId:number, message:any) {\n    for (const peerId of this.receiverServers.servers(key, socketId)) {\n      if (this.id === peerId) {\n        this.handlePublisherPeerMessage(key, this.id, socketId, message);\n        return;\n      }\n      this.sendToPeer(peerId, new PublisherPeerMessage(key, this.id, socketId, message));\n      return;\n    }\n    this.logger.warn(`Unable to find receive session callbacks for \"${key}\" and socket ${socketId}`);\n  }\n\n  handlePublisherPeerMessage(key:string, serverId:number, socketId:number, message:any) {\n    const regexStrings = this.receiverSessions.regexes(key, serverId, socketId);\n    for (const regexString of regexStrings) {\n      const callbacks = this.receiveCallbacks.get(regexString);\n      if (!callbacks) {\n        continue;\n      }\n      const messageCallback = callbacks[0];\n      if (typeof messageCallback === 'function') {\n        messageCallback(key, serverId, socketId, message);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Indicate this server instance is receiving messages from publishers for keys matching the regex string.\n   * @param {string} regexString Regex to match keys with\n   * @param {(key:string, active:boolean) => void} callback Callback function, called when a receiver should start or stop receiving values\n   * @return {void}\n   */\n  receive(regexString:string, messageCallback?: (key:string, serverId:number, socketId: number, message: any,) => void|Promise<void>, openCallback?: (key:string, serverId:number, socketId: number, credentials:Object) => void|Promise<void>, closeCallback?: (key:string, serverId:number, socketId: number) => void|Promise<void>) {\n    const regexStrings = new Set(this.receivers.get(this.id));\n    regexStrings.add(regexString);\n    this.receiveCallbacks.set(regexString, [messageCallback, openCallback, closeCallback]);\n    this.receivers.set(this.id, [...regexStrings]);\n  }\n\n  /**\n   * Indicate this server instance is no longer receiving from publishers for keys matching the regex string.\n   * @param {string} regexString Regex to match keys with\n   * @param {(key:string, active:boolean) => void} callback Callback function, called when a receiver should start or stop receiving values\n   * @return {void}\n   */\n  unreceive(regexString:string) {\n    for (const [key, serverId, socketId] of this.receiverSessions.publishers(regexString)) {\n      if (this.id === serverId) {\n        this.handlePublisherClose(key, this.id, socketId);\n      }\n    }\n    const regexStrings = new Set(this.receivers.get(this.id));\n    regexStrings.delete(regexString);\n    this.receiveCallbacks.delete(regexString);\n    if (regexStrings.size > 0) {\n      this.receivers.set(this.id, [...regexStrings]);\n    } else {\n      this.receivers.delete(this.id);\n    }\n  }\n\n  /**\n   * Update the peers Observed remove map with local peer IDs\n   * @return {void}\n   */\n  updatePeers() {\n    const peerIds = [...this.peerConnections.keys(), ...this.peerSockets.targets];\n    if (peerIds.length === 0) {\n      this.peers.delete(this.id);\n    } else {\n      this.peers.set(this.id, peerIds);\n    }\n  }\n\n  /**\n   * Traverse through the peers Observed remove map to find all peers through which the specified peer is connected to\n   * @param {number} id Peer ID of the root peer\n   * @param {Set<number>} peerIds Set to add connected peers to. (Passed by reference.)\n   * @return {void}\n   */\n  connectedPeers(id:number, peerIds:Set<number>) {\n    const values = this.peers.get(id);\n    if (!values) {\n      return;\n    }\n    for (const peerId of values) {\n      if (peerIds.has(peerId)) {\n        continue;\n      }\n      peerIds.add(peerId);\n      this.connectedPeers(peerId, peerIds);\n    }\n  }\n\n  /**\n   * Traverse through connected peers and remove any peers without a direct path. Used after a peer disconnects.\n   * @return {void}\n   */\n  prunePeers() {\n    const connectedPeerIds = new Set();\n    const disconnectedPeerIds = new Set();\n    this.connectedPeers(this.id, connectedPeerIds);\n    for (const peerId of this.peers.keys()) {\n      if (this.id === peerId) {\n        continue;\n      }\n      if (!connectedPeerIds.has(peerId)) {\n        disconnectedPeerIds.add(peerId);\n      }\n    }\n    disconnectedPeerIds.forEach((peerId) => this.removePeer(peerId));\n  }\n\n  /**\n   * Removes a peer, reassigning any active providers.\n   * @param {number} peerId Peer ID of the peer\n   * @return {void}\n   */\n  removePeer(peerId: number) {\n    this.logger.info(`Removing peer ${peerId}`);\n    this.peers.delete(peerId);\n    this.providers.delete(peerId);\n    this.providerRegexes.delete(peerId);\n    this.receivers.delete(peerId);\n    this.receiverRegexes.delete(peerId);\n    for (const [pId, key] of this.peerSubscriptions) {\n      if (pId === peerId) {\n        this.peerSubscriptions.delete([pId, key]);\n      }\n    }\n    for (const [key, [pId]] of this.activeProviders) {\n      if (pId === peerId) {\n        this.activeProviders.delete(key);\n        this.assignProvider(key);\n      }\n    }\n    const publishers = this.receiverServers.publishers(peerId);\n    this.receiverServers.removeServer(peerId);\n    for (const [key, socketId] of publishers) {\n      this.assignReceiver(key, socketId);\n    }\n    for (const [key, socketId] of this.publisherServers.publishers(peerId)) {\n      this.handlePublisherClose(key, peerId, socketId);\n    }\n    this.publisherServers.removeServer(peerId);\n  }\n\n\n  /**\n   * Adds a peer.\n   * @param {number} socketId Socket ID of the peer\n   * @param {number} peerId Peer ID of the peer\n   * @return {void}\n   */\n  addPeer(socketId:number, peerId:number) {\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      throw new Error(`Can not add peer with socket ID ${socketId}, socket does not exist`);\n    }\n    this.logger.info(`Adding peer ${ws.credentials && ws.credentials.ip ? ws.credentials.ip : 'with unknown IP'} (${socketId}) with ID ${peerId}`);\n    this.peerSockets.addEdge(socketId, peerId);\n    this.emit('addPeer', peerId);\n    this.updatePeers();\n  }\n\n  /**\n   * Stops the server by gracefully closing all sockets and outgoing connections\n   * @return {Promise<void>}\n   */\n  async close() {\n    this.logger.info('Closing');\n    this.isClosing = true;\n    for (const [socketId, socket] of this.sockets) {\n      this.logger.info(`Sending close event with code 1001 to socket ${socketId} during server close`);\n      socket.end(1001, 'Shutting down');\n    }\n    const peerDisconnectPromises = [];\n    for (const peerId of this.peerConnections.keys()) {\n      peerDisconnectPromises.push(this.disconnectFromPeer(peerId));\n    }\n    for (const [key, timeout] of this.provideDebounceTimeouts) {\n      clearTimeout(timeout);\n      this.provideDebounceTimeouts.delete(key);\n    }\n    await Promise.all(peerDisconnectPromises);\n    for (const [peerId, reconnectTimeout] of this.peerReconnectTimeouts) {\n      this.logger.warn(`Clearing peer ${peerId} reconnect timeout during server close`);\n      clearTimeout(reconnectTimeout);\n    }\n    this.peerReconnectTimeouts.clear();\n    const timeout = Date.now() + 10000;\n    while (this.sockets.size > 0 && Date.now() < timeout) {\n      await new Promise((resolve) => setTimeout(resolve, 100));\n    }\n    this.peers.delete(this.id);\n    this.providers.delete(this.id);\n    this.providerRegexes.delete(this.id);\n    this.receivers.delete(this.id);\n    this.receiverRegexes.delete(this.id);\n    for (const [peerId, key] of this.peerSubscriptions) {\n      if (peerId === this.id) {\n        this.peerSubscriptions.delete([peerId, key]);\n      }\n    }\n    for (const [key, [peerId]] of this.activeProviders) {\n      if (peerId === this.id) {\n        this.activeProviders.delete(key);\n      }\n    }\n    this.receiverServers.removeServer(this.id);\n    for (const [key, socketId] of this.publisherServers.publishers(this.id)) {\n      this.handlePublisherClose(key, this.id, socketId);\n    }\n    this.publisherServers.removeServer(this.id);\n    this.receiveCallbacks.clear();\n    if (Date.now() > timeout) {\n      this.logger.warn('Closed after timeout');\n    } else {\n      this.logger.info('Closed');\n    }\n    this.provideCallbacks.clear();\n    this.provideOptions.clear();\n    for (const provideDebounceTimeout of this.provideDebounceTimeouts.values()) {\n      clearTimeout(provideDebounceTimeout);\n    }\n    this.provideDebounceTimeouts.clear();\n\n    clearInterval(this.flushInterval);\n    clearInterval(this.keyFlushInterval);\n  }\n\n  /**\n   * Connects to a peer\n   * @param {string} address Websocket URL of the peer\n   * @param {Object} [credentials] Credentials to send during the peer request\n   * @param {number} [attempt] Number of previous reconnect attempts\n   * @return {Promise<number>}\n   */\n  async connectToPeer(address:string, credentials?: Object):Promise<number> {\n    if (this.isClosing) {\n      throw new Error(`Unable to connect to ${address}, closing`);\n    }\n    this.logger.info(`Connecting to peer ${address}`);\n    const peerConnection = new PeerConnection(this.id, address, this.maxPayloadLength, credentials);\n    const messageQueue = [];\n    const queueMessages = (message:any) => {\n      messageQueue.push(message);\n    };\n    peerConnection.on('message', queueMessages);\n    let peerId;\n    try {\n      peerId = await peerConnection.open();\n    } catch (error) {\n      if (error.name === 'PeerError' && error.code === 801) {\n        const pId = error.peerId;\n        if (pId) {\n          this.logger.warn(`Socket to peer ${pId} at ${address} already exists`);\n          return pId;\n        }\n      }\n      if (error.name === 'PeerError' && error.code === 802) {\n        const pId = error.peerId;\n        if (pId) {\n          this.logger.warn(`Connection to peer ${pId} at ${address} already exists`);\n          return pId;\n        }\n      }\n      throw error;\n    }\n    if (!peerId) {\n      throw new Error(`Did not receive peer ID when connecting to ${address}`);\n    }\n    if (this.peerConnections.has(peerId)) {\n      await peerConnection.close(1000);\n      this.logger.warn(`Closing connection to ${address}, connection to peer ${peerId} already exists`);\n      return peerId;\n    }\n    if (this.peerSockets.hasTarget(peerId)) {\n      await peerConnection.close(1000);\n      this.logger.warn(`Closing connection to ${address}, socket with peer ${peerId} already exists`);\n      return peerId;\n    }\n    peerConnection.on('close', (code:number) => {\n      const shouldReconnect = this.peerConnections.has(peerId);\n      this.logger.info(`Connection to ${address} with peer ID ${peerId} closed with code ${code}`);\n      this.peerConnections.delete(peerId);\n      this.emit('removePeer', peerId);\n      this.updatePeers();\n      this.prunePeers();\n      if (!shouldReconnect) {\n        return;\n      }\n      if (this.isClosing) {\n        return;\n      }\n      if (code !== 1001) {\n        this.reconnectToPeer(peerId, 1, address, credentials);\n      }\n    });\n    this.peerConnections.set(peerId, peerConnection);\n    this.emit('addPeer', peerId);\n    peerConnection.removeListener('message', queueMessages);\n    peerConnection.on('message', (message:any) => {\n      this.handleMessage(message, peerId);\n    });\n    for (const message of messageQueue) {\n      this.handleMessage(message, peerId);\n    }\n    this.updatePeers();\n    this.logger.info(`Connected to ${address} with peer ID ${peerId}`);\n    // Reset local values so they don't get overwritten on OR map sync\n    this.providers.set(this.id, [...this.provideCallbacks.keys()]);\n    this.receivers.set(this.id, [...this.receiveCallbacks.keys()]);\n    for (const key of this.subscriptions.targets) {\n      this.peerSubscriptions.add([this.id, key]);\n    }\n\n\n    await this.syncPeerConnection(peerId);\n    return peerId;\n  }\n\n  /**\n   * Disconnect from a peer\n   * @param {number} peerId Peer ID\n   * @return {Promise<void>}\n   */\n  async disconnectFromPeer(peerId: number) {\n    const peerConnection = this.peerConnections.get(peerId);\n    this.peerConnections.delete(peerId);\n    this.emit('removePeer', peerId);\n    const peerReconnectTimeout = this.peerReconnectTimeouts.get(peerId);\n    if (typeof peerReconnectTimeout !== 'undefined') {\n      this.peerReconnectTimeouts.delete(peerId);\n      this.logger.info(`Clearing peer ${peerId} reconnect timeout during disconnect`);\n      clearTimeout(peerReconnectTimeout);\n    }\n    if (peerConnection) {\n      await peerConnection.close(1001, 'Disconnect requested');\n    }\n    for (const socketId of this.peerSockets.getSources(peerId)) {\n      const socket = this.sockets.get(socketId);\n      if (!socket) {\n        this.logger.warn(`Unable to find socket ${socketId} for peer ${peerId} during disconnect`);\n        continue;\n      }\n      await new Promise((resolve, reject) => {\n        const handleClose = (sId:number) => {\n          if (sId !== socketId) {\n            return;\n          }\n          this.removeListener('error', handleError);\n          this.removeListener('close', handleClose);\n          resolve();\n        };\n        const handleError = (error:Error) => {\n          this.removeListener('error', handleError);\n          this.removeListener('close', handleClose);\n          reject(error);\n        };\n        this.on('error', handleError);\n        this.on('close', handleClose);\n        this.logger.info(`Sending close event with code 1001 to socket ${socketId} during peer disconnect`);\n        socket.end(1001, 'Peer disconnecting');\n      });\n      this.logger.info(`Closed socket ${socketId} for peer ${peerId} during disconnect`);\n    }\n  }\n\n  /**\n   * Send a peer sync message to an (outgoing) peer connection\n   * @param {number} peerId Peer ID to reconnect to\n   * @param {number} [attempt] Number of previous reconnect attempts\n   * @param {string} address Websocket URL of the peer\n   * @param {Object} [credentials] Credentials to send during the peer reconnect request\n   * @return {void}\n   */\n  reconnectToPeer(peerId:number, attempt: number, address:string, credentials?: Object) {\n    if (this.isClosing) {\n      return;\n    }\n    let peerReconnectTimeout = this.peerReconnectTimeouts.get(peerId);\n    if (typeof peerReconnectTimeout !== 'undefined') {\n      this.peerReconnectTimeouts.delete(peerId);\n      this.logger.info(`Clearing peer ${peerId} reconnect timeout during subsequent reconnect`);\n      clearTimeout(peerReconnectTimeout);\n    }\n    const duration = attempt > 8 ? 60000 + Math.round(Math.random() * 10000) : attempt * attempt * 1000;\n    this.logger.warn(`Reconnect to peer ${peerId} attempt ${attempt} scheduled in ${Math.round(duration / 100) / 10} seconds`);\n    peerReconnectTimeout = setTimeout(async () => {\n      this.logger.info(`Reconnecting to peer ${peerId}, attempt ${attempt}`);\n      this.peerReconnectTimeouts.delete(peerId);\n      try {\n        await this.connectToPeer(address, credentials);\n      } catch (error) {\n        if (error.name === 'PeerError' && error.code === 801) {\n          this.logger.warn(`Socket to peer ${peerId} at ${address} already exists`);\n          return;\n        }\n        if (error.name === 'PeerError' && error.code === 802) {\n          this.logger.warn(`Connection to peer ${peerId} at ${address} already exists`);\n          return;\n        }\n        if (error.name === 'CloseError' && error.code === 502) {\n          this.logger.warn(`Connection closed before response from peer ${peerId} at ${address} was received`);\n          return;\n        }\n        if (error.stack) {\n          this.logger.error(`Error reconnecting to peer ${peerId} at ${address}:`);\n          error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n        } else {\n          this.logger.error(`Error reconnecting to peer ${peerId} at ${address}`);\n        }\n        this.reconnectToPeer(peerId, attempt + 1, address, credentials);\n      }\n    }, duration);\n    this.peerReconnectTimeouts.set(peerId, peerReconnectTimeout);\n  }\n\n  /**\n   * Handle a peer sync message, updating all shared maps with the provided data\n   * @param {PeerSync} peerSync Peer sync object\n   * @return {void}\n   */\n  handlePeerSync(peerSync: PeerSync) {\n    this.peers.process(peerSync.peers.queue, true);\n    this.providers.process(peerSync.providers.queue, true);\n    this.receivers.process(peerSync.receivers.queue, true);\n    this.activeProviders.process(peerSync.activeProviders.queue, true);\n    this.peerSubscriptions.process(peerSync.peerSubscriptions.queue, true);\n    for (const customMapDump of peerSync.customMapDumps) {\n      const customMap = this.maps[customMapDump.name]; // eslint-disable-line no-underscore-dangle\n      if (typeof customMap !== 'undefined') {\n        customMap.process(customMapDump.queue, true);\n      }\n    }\n    const peerConnection = this.peerConnections.get(peerSync.id);\n    this.logger.info(`Sending peer sync response to peer ${peerSync.id}`);\n    if (peerConnection) {\n      if (peerConnection.ws.readyState !== 1) {\n        this.logger.error(`Unable to handle sync from peer ${peerSync.id}, connection is in ready state is ${peerConnection.ws.readyState}`);\n        return;\n      }\n      peerConnection.ws.send(this.encode(new PeerSyncResponse(this.id)));\n      return;\n    }\n    for (const socketId of this.peerSockets.getSources(peerSync.id)) {\n      const ws = this.sockets.get(socketId);\n      if (ws) {\n        ws.send(this.encode(new PeerSyncResponse(this.id)), true, false);\n        return;\n      }\n    }\n    this.logger.error(`Unable to handle sync from peer ${peerSync.id}, socket or connection does not exist`);\n  }\n\n  /**\n   * Send a peer sync message to an (outgoing) peer connection\n   * @param {number} peerId Peer ID to send sync message to\n   * @return {Promise<void>}\n   */\n  async syncPeerConnection(peerId: number) {\n    const peerConnection = this.peerConnections.get(peerId);\n    if (!peerConnection) {\n      this.logger.error(`Unable to sync peer ${peerId}, connection does not exist`);\n      return;\n    }\n    if (peerConnection.ws.readyState !== 1) {\n      this.logger.error(`Unable to sync peer ${peerId}, readystate ${peerConnection.ws.readyState}`);\n      return;\n    }\n    const customMapDumps = [];\n    for (const [name, customMap] of this._customMaps) { // eslint-disable-line no-underscore-dangle\n      const customMapDump = new CustomMapDump(name, customMap.dump());\n      customMapDumps.push(customMapDump);\n    }\n    const customSetDumps = [];\n    for (const [name, customSet] of this._customSets) { // eslint-disable-line no-underscore-dangle\n      const customSetDump = new CustomSetDump(name, customSet.dump());\n      customSetDumps.push(customSetDump);\n    }\n    const peerSync = new PeerSync(\n      this.id,\n      new PeerDump(this.peers.dump()),\n      new ProviderDump(this.providers.dump()),\n      new ReceiverDump(this.receivers.dump()),\n      new ActiveProviderDump(this.activeProviders.dump()),\n      new PeerSubscriptionDump(this.peerSubscriptions.dump()),\n      customMapDumps,\n      customSetDumps,\n    );\n    const peerSyncResponsePromise = new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        this.removeListener('peerSyncResponse', handlePeerSyncReponse);\n        peerConnection.removeListener('close', handleClose);\n        reject(new Error(`Timeout waiting for sync response from peer ${peerId}`));\n      }, 60000);\n      const handlePeerSyncReponse = (pId:number) => {\n        if (pId !== peerId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('peerSyncResponse', handlePeerSyncReponse);\n        peerConnection.removeListener('close', handleClose);\n        resolve();\n      };\n      const handleClose = () => {\n        clearTimeout(timeout);\n        this.removeListener('peerSyncResponse', handlePeerSyncReponse);\n        peerConnection.removeListener('close', handleClose);\n        reject(new Error(`Connection closed before sync response from peer ${peerId} was received`));\n      };\n      this.on('peerSyncResponse', handlePeerSyncReponse);\n      peerConnection.on('close', handleClose);\n    });\n    const message = this.encode(peerSync);\n    this.logger.info(`Sending ${message.length} byte peer sync message to peer ${peerId} connection`);\n    await this.sendLargeMessageToPeer(message, peerId);\n    try {\n      await peerSyncResponsePromise;\n      this.logger.info(`Received peer sync response from peer ${peerId}`);\n    } catch (error) {\n      if (error.stack) {\n        this.logger.error('Error in peer connection sync response:');\n        error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n      } else {\n        this.logger.error(`Error in peer connection sync response: ${error.message}`);\n      }\n    }\n    try {\n      await this.streamDataToPeer(peerId);\n      this.emit('peerSync', peerId);\n    } catch (error) {\n      if (error.stack) {\n        this.logger.error('Error in peer connection data stream:');\n        error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n      } else {\n        this.logger.error(`Error in peer connection data stream: ${error.message}`);\n      }\n    }\n  }\n\n  /**\n   * Send a peer sync message to an (incoming) peer socket\n   * @param {number} socketID Socket ID of peer to send sync message to\n   * @param {number} peerId Peer ID to send sync message to\n   * @return {Promise<void>}\n   */\n  async syncPeerSocket(socketId: number, peerId: number) {\n    const socket = this.sockets.get(socketId);\n    if (!socket) {\n      throw new Error(`Can not publish data to peer ${peerId} (${socketId}), socket does not exist`);\n    }\n    const customMapDumps = [];\n    for (const [name, customMap] of this._customMaps) { // eslint-disable-line no-underscore-dangle\n      const customMapDump = new CustomMapDump(name, customMap.dump());\n      customMapDumps.push(customMapDump);\n    }\n    const customSetDumps = [];\n    for (const [name, customSet] of this._customSets) { // eslint-disable-line no-underscore-dangle\n      const customSetDump = new CustomSetDump(name, customSet.dump());\n      customSetDumps.push(customSetDump);\n    }\n    const peerSync = new PeerSync(\n      this.id,\n      new PeerDump(this.peers.dump()),\n      new ProviderDump(this.providers.dump()),\n      new ReceiverDump(this.receivers.dump()),\n      new ActiveProviderDump(this.activeProviders.dump()),\n      new PeerSubscriptionDump(this.peerSubscriptions.dump()),\n      customMapDumps,\n      customSetDumps,\n    );\n    const peerSyncResponsePromise = new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        this.removeListener('peerSyncResponse', handlePeerSyncReponse);\n        this.removeListener('close', handleClose);\n        reject(new Error(`Timeout waiting for sync response from peer ${peerId}`));\n      }, 60000);\n      const handleClose = (sId:number) => {\n        if (sId !== socketId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('peerSyncResponse', handlePeerSyncReponse);\n        this.removeListener('close', handleClose);\n        reject(new Error(`Socket ${socketId} closed before sync response from peer ${peerId} was received`));\n      };\n      const handlePeerSyncReponse = (pId:number) => {\n        if (pId !== peerId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('peerSyncResponse', handlePeerSyncReponse);\n        this.removeListener('close', handleClose);\n        resolve();\n      };\n      this.on('peerSyncResponse', handlePeerSyncReponse);\n      this.on('close', handleClose);\n    });\n    const message = this.encode(peerSync);\n    this.logger.info(`Sending ${message.length} byte peer sync message to peer ${peerId} at socket ${socketId}`);\n    await this.sendLargeMessageToSocket(message, peerId, socketId);\n    try {\n      await peerSyncResponsePromise;\n      this.logger.info(`Received peer sync response from peer ${peerId} at socket ${socketId}`);\n    } catch (error) {\n      if (error.stack) {\n        this.logger.error('Error in peer socket sync response:');\n        error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n      } else {\n        this.logger.error(`Error in peer socket sync response: ${error.message}`);\n      }\n    }\n    try {\n      await this.streamDataToPeer(peerId);\n      this.emit('peerSync', peerId);\n    } catch (error) {\n      if (error.stack) {\n        this.logger.error('Error in peer socket data stream:');\n        error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n      } else {\n        this.logger.error(`Error in peer socket data stream: ${error.message}`);\n      }\n    }\n  }\n\n  /**\n   * Check if peer exists\n   * @param {number} peerId Peer ID\n   * @return {boolean}\n   */\n  hasPeer(peerId: number):boolean {\n    return this.peerSockets.hasTarget(peerId) || this.peerConnections.has(peerId);\n  }\n\n  /**\n   * Wait for a specific peer to connect\n   * @param {number} peerId Peer ID\n   * @param {number} duration Number of milliseconds to wait before throwing an error\n   * @return {Promise<void>}\n   */\n  async waitForPeerConnect(peerId: number, duration?: number = 5000) {\n    if (this.hasPeer(peerId)) {\n      return;\n    }\n    await new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        this.removeListener('addPeer', handleAddPeer);\n        reject(new Error(`Peer did not connect within ${duration}ms`));\n      }, duration);\n      const handleAddPeer = (pId: number) => {\n        if (pId !== peerId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('addPeer', handleAddPeer);\n        resolve();\n      };\n      this.addListener('addPeer', handleAddPeer);\n    });\n  }\n\n  /**\n   * Wait for a specific peer to disconnect\n   * @param {number} peerId Peer ID\n   * @param {number} duration Number of milliseconds to wait before throwing an error\n   * @return {Promise<void>}\n   */\n  async waitForPeerDisconnect(peerId: number, duration?: number = 5000) {\n    if (!this.hasPeer(peerId)) {\n      return;\n    }\n    await new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        this.removeListener('removePeer', handleRemovePeer);\n        reject(new Error(`Peer did not disconnect within ${duration}ms`));\n      }, duration);\n      const handleRemovePeer = (pId: number) => {\n        if (pId !== peerId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('removePeer', handleRemovePeer);\n        resolve();\n      };\n      this.addListener('removePeer', handleRemovePeer);\n    });\n  }\n\n  /**\n   * Wait for any queued auth requests associated with the socket to complete\n   * @param {number} socketId Socket ID\n   * @return {void}\n   */\n  async waitForSocketCredentialQueue(socketId:number) {\n    // Wait for any credential handler operations to complete\n    const queue = this.socketCredentialQueues.get(socketId);\n    if (queue) {\n      this.logger.info(`Waiting for socket ${socketId} credential queue with size ${queue.size} and ${queue.pending} pending`);\n      await queue.onIdle();\n    }\n  }\n\n  async sendLargeMessageToPeer(message: Buffer, peerId:number):Promise<boolean> {\n    const peerConnection = this.peerConnections.get(peerId);\n    if (!peerConnection) {\n      this.logger.error(`Unable to send message to peer ${peerId}, connection does not exist`);\n      return false;\n    }\n    if (message.length > this.maxPayloadLength) {\n      const chunkSize = Math.round(this.maxPayloadLength / 2);\n      const chunks = MultipartContainer.chunk(message, chunkSize);\n      this.logger.info(`Sending ${message.length} byte message to peer ${peerId} connection in ${chunks.length} chunks`);\n      for (const chunk of chunks) {\n        if (peerConnection.ws.readyState !== 1) {\n          this.logger.error(`Unable to send message to peer ${peerId}, ready state is ${peerConnection.ws.readyState}`);\n          return false;\n        }\n        await new Promise((resolve, reject) => {\n          peerConnection.ws.send(chunk, (error) => {\n            if (error) {\n              reject(error);\n            } else {\n              resolve();\n            }\n          });\n        });\n      }\n      return true;\n    } else if (peerConnection.ws.readyState !== 1) {\n      this.logger.error(`Unable to send message to peer ${peerId}, ready state is ${peerConnection.ws.readyState}`);\n      return false;\n    }\n    await new Promise((resolve, reject) => {\n      peerConnection.ws.send(message, (error) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve();\n        }\n      });\n    });\n    return true;\n  }\n\n  async sendLargeMessageToSocket(message: Buffer, peerId:number, socketId:number):Promise<boolean> {\n    const socket = this.sockets.get(socketId);\n    if (!socket) {\n      this.logger.error(`Can not send message to socket ${socketId}, socket does not exist`);\n      return false;\n    }\n    if (message.length > this.maxPayloadLength) {\n      const chunkSize = Math.round(this.maxPayloadLength / 2);\n      const chunks = MultipartContainer.chunk(message, chunkSize);\n      this.logger.info(`Sending ${message.length} byte message to to peer ${peerId} socket ${socketId} in ${chunks.length} chunks`);\n      for (const chunk of chunks) {\n        if (socket.getBufferedAmount() > this.maxBackpressure) {\n          await this.waitForDrain(socketId);\n        }\n        socket.send(chunk, true, false);\n      }\n    } else {\n      socket.send(message, true, false);\n    }\n    await this.waitForDrain(socketId);\n    return true;\n  }\n\n  async streamDataToPeerSocket(peerId: number, socketId: number):Promise<void> {\n    const insertions = [];\n    for (const item of this.data.pairs) {\n      insertions.push(item);\n      if (insertions.length >= 100) {\n        const message = this.encode(new DataSyncInsertions(insertions));\n        const sent = await this.sendLargeMessageToSocket(message, peerId, socketId);\n        if (!sent) {\n          this.logger.error(`Can not stream data to peer ${peerId} (${socketId}), socket does not exist`);\n          return;\n        }\n        insertions.length = 0;\n      }\n    }\n    const deletionsMessage = this.encode(new DataSyncDeletions([...this.data.deletions]));\n    await this.sendLargeMessageToSocket(deletionsMessage, peerId, socketId);\n  }\n\n  async streamDataToPeerConnection(peerId:number) {\n    const insertions = [];\n    for (const item of this.data.pairs) {\n      insertions.push(item);\n      if (insertions.length >= 100) {\n        const message = this.encode(new DataSyncInsertions(insertions));\n        const sent = await this.sendLargeMessageToPeer(message, peerId);\n        if (!sent) {\n          this.logger.error(`Can not stream data to peer ${peerId}, connection does not exist`);\n          return;\n        }\n        insertions.length = 0;\n      }\n    }\n    const deletionsMessage = this.encode(new DataSyncDeletions([...this.data.deletions]));\n    await this.sendLargeMessageToPeer(deletionsMessage, peerId);\n  }\n\n\n  streamDataToPeer(peerId: number): void | Promise<void> { // eslint-disable-line consistent-return\n    if (this.peerConnections.has(peerId)) {\n      return this.streamDataToPeerConnection(peerId);\n    }\n    const socketId = [...this.peerSockets.getSources(peerId)][0];\n    if (this.sockets.has(socketId)) {\n      return this.streamDataToPeerSocket(peerId, socketId);\n    }\n    this.logger.error(`Unable to stream data to peer ${peerId}, no socket or connection exists`);\n  }\n\n  declare isClosing: boolean;\n  declare id: number;\n  declare shouldDeduplicate: boolean;\n  declare recordHashes: Map<string, string>;\n  declare recordHashObjects: Set<any>;\n  declare updateHashOnSet: (string, any) => void;\n  declare updateHashOnDelete: (string) => void;\n  declare maxPayloadLength: number;\n  declare maxBackpressure: number;\n  declare flushInterval: IntervalID;\n  declare keyFlushInterval: IntervalID;\n  declare mergeChunkPromises: Map<number, MergeChunksPromise>;\n  declare messageHashes: LruCache<string, boolean>;\n  declare eventSubscriptions: DirectedGraphMap<number, string>;\n  declare subscriptions: DirectedGraphMap<number, string>;\n  declare publishers: DirectedGraphMap<number, string>;\n  declare peerSockets:DirectedGraphMap<number, number>;\n  declare peerConnections:Map<number, PeerConnection>;\n  declare sockets:Map<number, UWSWebSocket>;\n  declare drainCallbacks:Map<number, [Array<() => void>, Array<(Error) => void>]>;\n  declare socketCredentialQueues:Map<number, PQueue>;\n  declare data:ObservedRemoveMap<string, any>;\n  declare peers:ObservedRemoveMap<number, Array<number>>;\n  declare providers:ObservedRemoveMap<number, Array<string>>;\n  declare provideCallbacks:Map<string, (string, boolean) => void|Promise<void>>;\n  declare provideOptions:Map<string, {debounce?: number}>;\n  declare provideDebounceTimeouts:Map<string, TimeoutID>;\n  declare activeProviders:ObservedRemoveMap<string, [number, string]>;\n  declare receivers:ObservedRemoveMap<number, Array<string>>;\n  declare receiveCallbacks:Map<string, [((string, number, number, any) => void|Promise<void>) | void, ((string, number, number, Object) => void|Promise<void>) | void, ((string, number, number) => void|Promise<void>) | void]>;\n  declare receiverSessions: PublisherSessionManager;\n  declare publisherSessions: PublisherSessionManager;\n  declare publisherServers: PublisherServerManager;\n  declare receiverServers: PublisherServerManager;\n  declare peerSubscriptions:ObservedRemoveSet<[number, string]>;\n  declare peerSubscriptionMap:Map<string, Set<number>>;\n  declare providerRegexes: Map<number, Array<[string, RegExp]>>;\n  declare receiverRegexes: Map<number, Map<string, RegExp>>;\n  declare peerRequestHandler: (credentials: Object) => Promise<{ success: boolean, code: number, message: string }>;\n  declare credentialsHandler: (credentials: Object) => Promise<{ success: boolean, code: number, message: string }>;\n  declare subscribeRequestHandler: (key:string, credentials: Object) => Promise<{ success: boolean, code: number, message: string }>;\n  declare publishRequestHandler: (key:string, credentials: Object) => Promise<{ success: boolean, code: number, message: string }>;\n  declare eventSubscribeRequestHandler: (name:string, credentials: Object) => Promise<{ success: boolean, code: number, message: string }>;\n  declare keysForDeletion:Map<string, number>;\n  declare peerReconnectTimeouts:Map<number, TimeoutID>;\n  declare logger: Logger;\n  declare maps: {[string]: ObservedRemoveMap<string, any>};\n  declare _customMaps: Map<string, ObservedRemoveMap<string, any>>;\n  declare sets: {[string]: ObservedRemoveSet<any>};\n  declare _customSets: Map<string, ObservedRemoveSet<any>>;\n}\n\nexport default Server;\n"],"file":"index.js"}