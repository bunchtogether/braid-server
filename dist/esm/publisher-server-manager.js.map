{"version":3,"sources":["../../src/publisher-server-manager.js"],"names":["DirectedGraphMap","PublisherServerManager","constructor","map","size","add","key","socketId","serverId","sessionKey","addEdge","removePublisher","removeSource","removeServer","removeTarget","hasPublisher","hasSource","publishers","results","sessionKeys","getSources","socketIdString","split","parseInt","push","servers","getTargets"],"mappings":"AAEA,OAAOA,gBAAP,MAA6B,oBAA7B;;AAEA,MAAMC,sBAAN,CAA6B;AAG3BC,EAAAA,WAAW,GAAG;AACZ,SAAKC,GAAL,GAAW,IAAIH,gBAAJ,EAAX;AACD;;AAEO,MAAJI,IAAI,GAAG;AACT,WAAO,KAAKD,GAAL,CAASC,IAAhB;AACD;;AAEDC,EAAAA,GAAG,CAACC,GAAD,EAAaC,QAAb,EAA8BC,QAA9B,EAA+C;AAChD,UAAMC,UAAU,GAAI,GAAEH,GAAI,IAAGC,QAAS,EAAtC;AACA,SAAKJ,GAAL,CAASO,OAAT,CAAiBD,UAAjB,EAA6BD,QAA7B;AACD;;AAEDG,EAAAA,eAAe,CAACL,GAAD,EAAaC,QAAb,EAA8B;AAC3C,UAAME,UAAU,GAAI,GAAEH,GAAI,IAAGC,QAAS,EAAtC;AACA,SAAKJ,GAAL,CAASS,YAAT,CAAsBH,UAAtB;AACD;;AAEDI,EAAAA,YAAY,CAACL,QAAD,EAAkB;AAC5B,SAAKL,GAAL,CAASW,YAAT,CAAsBN,QAAtB;AACD;;AAEDO,EAAAA,YAAY,CAACT,GAAD,EAAaC,QAAb,EAA8B;AACxC,UAAME,UAAU,GAAI,GAAEH,GAAI,IAAGC,QAAS,EAAtC;AACA,WAAO,KAAKJ,GAAL,CAASa,SAAT,CAAmBP,UAAnB,CAAP;AACD;;AAEDQ,EAAAA,UAAU,CAACT,QAAD,EAA0C;AAClD,UAAMU,OAAO,GAAG,EAAhB;AACA,UAAMC,WAAW,GAAG,KAAKhB,GAAL,CAASiB,UAAT,CAAoBZ,QAApB,CAApB;;AACA,SAAK,MAAMC,UAAX,IAAyBU,WAAzB,EAAsC;AACpC,YAAM,CAACb,GAAD,EAAMe,cAAN,IAAwBZ,UAAU,CAACa,KAAX,CAAiB,GAAjB,CAA9B;AACA,YAAMf,QAAQ,GAAGgB,QAAQ,CAACF,cAAD,EAAiB,EAAjB,CAAzB;AACAH,MAAAA,OAAO,CAACM,IAAR,CAAa,CAAClB,GAAD,EAAMC,QAAN,CAAb;AACD;;AACD,WAAOW,OAAP;AACD;;AAEDO,EAAAA,OAAO,CAACnB,GAAD,EAAaC,QAAb,EAA4C;AACjD,UAAME,UAAU,GAAI,GAAEH,GAAI,IAAGC,QAAS,EAAtC;AACA,WAAO,CAAC,GAAG,KAAKJ,GAAL,CAASuB,UAAT,CAAoBjB,UAApB,CAAJ,CAAP;AACD;;AA5C0B;;AA+C7B,eAAeR,sBAAf","sourcesContent":["// @flow\n\nimport DirectedGraphMap from 'directed-graph-map';\n\nclass PublisherServerManager {\n  declare map: DirectedGraphMap<string, number>;\n\n  constructor() {\n    this.map = new DirectedGraphMap();\n  }\n\n  get size() {\n    return this.map.size;\n  }\n\n  add(key:string, socketId:number, serverId:number) {\n    const sessionKey = `${key}:${socketId}`;\n    this.map.addEdge(sessionKey, serverId);\n  }\n\n  removePublisher(key:string, socketId:number) {\n    const sessionKey = `${key}:${socketId}`;\n    this.map.removeSource(sessionKey);\n  }\n\n  removeServer(serverId:number) {\n    this.map.removeTarget(serverId);\n  }\n\n  hasPublisher(key:string, socketId:number) {\n    const sessionKey = `${key}:${socketId}`;\n    return this.map.hasSource(sessionKey);\n  }\n\n  publishers(serverId:number):Array<[string, number]> {\n    const results = [];\n    const sessionKeys = this.map.getSources(serverId);\n    for (const sessionKey of sessionKeys) {\n      const [key, socketIdString] = sessionKey.split(':');\n      const socketId = parseInt(socketIdString, 10);\n      results.push([key, socketId]);\n    }\n    return results;\n  }\n\n  servers(key:string, socketId:number):Array<number> {\n    const sessionKey = `${key}:${socketId}`;\n    return [...this.map.getTargets(sessionKey)];\n  }\n}\n\nexport default PublisherServerManager;\n"],"file":"publisher-server-manager.js"}