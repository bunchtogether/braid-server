{"version":3,"sources":["../../../src/lib/request-ip.js"],"names":["correctForm","s","v4","Address4","error","v6","Address6","error2","console","log","message","res","req","ipString","Error","getHeader","forwardedForString","forwardedIps","split","map","e","ip","trim","includes","splitted","length","forwardedIp","fromUnsignedByteArray","Uint8Array","getRemoteAddress","undefined","to4"],"mappings":"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","sourcesContent":["// @flow\n\nimport {\n  Address4,\n  Address6,\n} from 'ip-address';\n\n// Based on https://raw.githubusercontent.com/pbojinov/request-ip/master/src/index.js\n\nimport type {\n  HttpResponse,\n  UWSHttpRequest,\n} from '../uWebSockets';\n\nconst correctForm = (s?:string) => {\n  if (!s) {\n    return null;\n  }\n  try {\n    const v4 = new Address4(s);\n    return v4.correctForm();\n  } catch (error) {\n    try {\n      const v6 = new Address6(s);\n      return v6.correctForm();\n    } catch (error2) {\n      console.log(`Unable to parse address ${s}: ${error.message}, ${error2.message}`);\n    }\n  }\n  return null;\n};\n\nexport default (res: HttpResponse, req:UWSHttpRequest) => {\n  let ipString;\n\n  if (typeof req === 'undefined') {\n    throw new Error('Missing required parameter req');\n  }\n\n  // Standard headers used by Amazon EC2, Heroku, and others.\n  ipString = correctForm(req.getHeader('x-client-ip'));\n  if (ipString) {\n    return ipString;\n  }\n\n  const forwardedForString = req.getHeader('x-forwarded-for');\n  if (forwardedForString) {\n    const forwardedIps = forwardedForString.split(',').map((e) => {\n      const ip = e.trim();\n      if (ip.includes(':')) {\n        const splitted = ip.split(':');\n        // make sure we only use this if it's ipv4 (ip:port)\n        if (splitted.length === 2) {\n          return splitted[0];\n        }\n      }\n      return ip;\n    });\n    for (const forwardedIp of forwardedIps) {\n      ipString = correctForm(forwardedIp);\n      if (ipString) {\n        return ipString;\n      }\n    }\n  }\n\n  // Cloudflare.\n  // @see https://support.cloudflare.com/hc/en-us/articles/200170986-How-does-Cloudflare-handle-HTTP-Request-headers-\n  // CF-Connecting-IP - applied to every request to the origin.\n  ipString = correctForm(req.getHeader('cf-connecting-ip'));\n  if (ipString) {\n    return ipString;\n  }\n\n  // Fastly and Firebase hosting header (When forwared to cloud function)\n  ipString = correctForm(req.getHeader('fastly-client-ip'));\n  if (ipString) {\n    return ipString;\n  }\n\n  // Akamai and Cloudflare: True-Client-IP.\n  ipString = correctForm(req.getHeader('true-client-ip'));\n  if (ipString) {\n    return ipString;\n  }\n\n  // Default nginx proxy/fcgi; alternative to x-forwarded-for, used by some proxies.\n  ipString = correctForm(req.getHeader('x-real-ip'));\n  if (ipString) {\n    return ipString;\n  }\n\n  // (Rackspace LB and Riverbed's Stingray)\n  // http://www.rackspace.com/knowledge_center/article/controlling-access-to-linux-cloud-sites-based-on-the-client-ip-address\n  // https://splash.riverbed.com/docs/DOC-1926\n  ipString = correctForm(req.getHeader('x-cluster-client-ip'));\n  if (ipString) {\n    return ipString;\n  }\n\n  ipString = correctForm(req.getHeader('x-forwarded'));\n  if (ipString) {\n    return ipString;\n  }\n\n  ipString = correctForm(req.getHeader('forwarded-for'));\n  if (ipString) {\n    return ipString;\n  }\n\n  let v6;\n  try {\n    v6 = Address6.fromUnsignedByteArray(new Uint8Array(res.getRemoteAddress()));\n  } catch (error) {\n    return undefined;\n  }\n\n  try {\n    const v4 = v6.to4();\n    return v4.correctForm();\n  } catch (error) {\n    return v6.correctForm();\n  }\n};\n\n"],"file":"request-ip.js"}