{"version":3,"sources":["../../src/index.js"],"names":["randomInteger","crypto","randomBytes","readUInt32BE","MAX_PAYLOAD_LENGTH","MAX_BACKPRESSURE","previousGenerationCredentialsResponse","Buffer","from","previousGenerationReloadResponse","Server","EventEmitter","constructor","uwsServer","websocketPattern","websocketBehavior","compression","closeOnBackpressureLimit","maxPayloadLength","maxBackpressure","idleTimeout","options","messageHashes","LruCache","max","shouldDeduplicate","recordHashes","Map","recordHashObjects","Set","updateHashOnSet","name","data","has","delete","hash","set","updateHashOnDelete","mergeChunkPromises","drainCallbacks","ObservedRemoveMap","bufferPublishing","peers","providers","activeProviders","receivers","peerSubscriptions","ObservedRemoveSet","peerSubscriptionMap","providerRegexes","provideCallbacks","provideOptions","provideDebounceTimeouts","receiverRegexes","receiveCallbacks","receiverServers","PublisherServerManager","receiverSessions","PublisherSessionManager","publisherSessions","publisherServers","sockets","socketCredentialQueues","peerSockets","DirectedGraphMap","peerConnections","subscriptions","publishers","eventSubscriptions","keysForDeletion","peerReconnectTimeouts","_customMaps","_customSets","mapsGetter","target","existing","get","map","on","queue","publishToPeers","CustomMapDump","id","maps","Proxy","TypeError","setsGetter","CustomSetDump","sets","logger","isClosing","flushInterval","setInterval","flush","customMap","values","keyFlushInterval","now","Date","key","timestamp","setCredentialsHandler","credentials","success","code","message","setPeerRequestHandler","setSubscribeRequestHandler","setEventSubscribeRequestHandler","setPublishRequestHandler","DataDump","publishData","ProviderDump","ActiveProviderDump","ReceiverDump","PeerDump","PeerSubscriptionDump","peerId","peerIds","assignProvider","add","clearTimeout","removeActiveProvider","size","peerIdAndRegexString","regexString","debounce","setTimeout","previousPeerIds","length","prunePeers","previousPeerIdAndRegexString","callback","unprovide","previousPeerId","previousRegexString","regexStrings","regexPairs","RegExp","keysWithoutProviders","keys","filter","regexPair","regex","test","previousRegexStrings","regexMap","Array","isArray","includes","serverId","socketId","unassignReceiver","hasPublisher","assignReceiver","websocketOptions","Object","assign","upgrade","res","req","context","writeStatus","end","socketIp","socketOptions","ip","getHeader","info","error","stack","split","forEach","line","drain","ws","callbacks","open","emit","isBinary","toString","PeerSync","PeerSyncResponse","BraidEvent","BraidSocketEvent","PublisherOpen","PublisherClose","PublisherPeerMessage","MultipartContainer","DataSyncInsertions","DataSyncDeletions","hasSource","getTargets","handleMessage","Credentials","handleCredentialsRequest","value","PeerRequest","handlePeerRequest","SubscribeRequest","handleSubscribeRequest","Unsubscribe","removeSubscription","EventSubscribeRequest","handleEventSubscribeRequest","EventUnsubscribe","removeEventSubscription","PublishRequest","handlePublishRequest","Unpublish","removePublisher","PublisherMessage","handlePublisherMessage","indexOf","sentPrevousGeneration","send","close","removeSubscriptions","removePublishers","removeEventSubscriptions","removeSource","updatePeers","client","setMaxListeners","isNativeAccelerationEnabled","encode","JSON","stringify","handleMultipartContainer","multipartContainer","existingMergeChunksPromise","push","mergeChunksPromise","getMergeChunksPromise","buffer","waitForDrain","socket","Error","getBufferedAmount","Promise","resolve","reject","errbacks","undefined","deduplicate","active","off","emitToClients","args","publishEvent","emitToSocket","publishSocketEvent","throwOnLeakedReferences","obj","ids","peerUWSSockets","edges","readyState","encoded","sendToPeer","peerConnection","getSources","func","credentialsHandler","peerRequestHandler","subscribeRequestHandler","eventSubscribeRequestHandler","publishRequestHandler","newClientCredentials","_handleCredentialsRequest","newQueue","PQueue","concurrency","onIdle","then","credentialsDidUpdate","setImmediate","clientCredentials","getOwnPropertyNames","response","unencoded","CredentialsResponse","wsA","warn","PeerResponse","hasTarget","waitForSocketCredentialQueue","addPeer","targets","syncPeerSocket","addSubscription","SubscribeResponse","addEventSubscription","EventSubscribeResponse","addPublisher","PublishResponse","process","insertions","deletions","handlePeerSync","handlePublisherOpen","handlePublisherClose","handlePublisherPeerMessage","customSet","subscriberEvent","subscriptionMap","valuePair","valueId","insertionQueue","deletionQueue","addEdge","removeEdge","pair","pairs","peerIdAndRegexStrings","regexes","sort","x","y","farmhash","hash32","provide","activeRegexString","peerIdWithRegexes","activePeerId","Math","floor","random","serverIds","servers","openCallback","closeCallback","messageCallback","receive","unreceive","connectedPeers","connectedPeerIds","disconnectedPeerIds","removePeer","pId","removeServer","peerDisconnectPromises","disconnectFromPeer","timeout","all","reconnectTimeout","clear","provideDebounceTimeout","clearInterval","connectToPeer","address","PeerConnection","messageQueue","queueMessages","shouldReconnect","reconnectToPeer","removeListener","syncPeerConnection","peerReconnectTimeout","handleClose","sId","handleError","attempt","duration","round","peerSync","customMapDump","customMapDumps","dump","customSetDumps","customSetDump","peerSyncResponsePromise","handlePeerSyncReponse","sendLargeMessageToPeer","streamDataToPeer","sendLargeMessageToSocket","hasPeer","waitForPeerConnect","handleAddPeer","addListener","waitForPeerDisconnect","handleRemovePeer","pending","chunkSize","chunks","chunk","streamDataToPeerSocket","item","sent","deletionsMessage","streamDataToPeerConnection"],"mappings":"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","sourcesContent":["// @flow\n\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { merge } from 'lodash';\nimport crypto from 'crypto';\nimport DirectedGraphMap from 'directed-graph-map';\nimport EventEmitter from 'events';\nimport farmhash from 'farmhash';\nimport LruCache from 'lru-cache';\nimport ObservedRemoveSet from 'observed-remove/set';\nimport ObservedRemoveMap from 'observed-remove/map';\nimport PQueue from 'p-queue';\nimport {\n  ActiveProviderDump,\n  BraidEvent,\n  BraidSocketEvent,\n  Credentials,\n  CredentialsResponse,\n  CustomMapDump,\n  CustomSetDump,\n  DataDump,\n  DataSyncDeletions,\n  DataSyncInsertions,\n  EventSubscribeRequest,\n  EventSubscribeResponse,\n  EventUnsubscribe,\n  MergeChunksPromise,\n  MultipartContainer,\n  PeerDump,\n  PeerRequest,\n  PeerResponse,\n  PeerSubscriptionDump,\n  PeerSync,\n  PeerSyncResponse,\n  ProviderDump,\n  PublishRequest,\n  PublishResponse,\n  PublisherClose,\n  PublisherMessage,\n  PublisherOpen,\n  PublisherPeerMessage,\n  ReceiverDump,\n  SubscribeRequest,\n  SubscribeResponse,\n  Unpublish,\n  Unsubscribe,\n  decode,\n  encode,\n  isNativeAccelerationEnabled,\n} from '@bunchtogether/braid-messagepack';\nimport {\n  hash32,\n  hash64,\n} from '@bunchtogether/hash-object';\nimport makeLogger from './lib/logger';\nimport requestIp from './lib/request-ip';\nimport PeerConnection from './peer-connection';\nimport PublisherServerManager from './publisher-server-manager';\nimport PublisherSessionManager from './publisher-session-manager';\n\nimport type {\n  UWSTemplatedApp,\n  UWSWebSocket,\n} from './uWebSockets';\n\ntype Logger = {\n  debug: (string) => *,\n  info: (string) => *,\n  warn: (string) => *,\n  error: (string) => *\n};\n\nfunction randomInteger() {\n  return crypto.randomBytes(4).readUInt32BE(0, true);\n}\n\nconst MAX_PAYLOAD_LENGTH = 100 * 1024 * 1024;\nconst MAX_BACKPRESSURE = MAX_PAYLOAD_LENGTH * 4;\n\nconst previousGenerationCredentialsResponse = Buffer.from('x0gCg6dzdWNjZXNzw6Rjb2RlzMinbWVzc2FnZdktSW52YWxpZCBtc2dwYWNrIGltcGxlbWVudGF0aW9uLCBwbGVhc2UgcmVsb2Fk', 'base64');\nconst previousGenerationReloadResponse = Buffer.from('xwsmlKZyZWxvYWSQAJA=', 'base64');\n\n/**\n * Class representing a Braid Server\n */\nclass Server extends EventEmitter {\n  /**\n   * Create a Braid Server.\n   * @param {UWSTemplatedApp} uwsServer uWebSockets.js server\n   * @param {UWSRecognizedString} websocketPattern uWebSockets.js websocket pattern\n   * @param {UWSWebSocketBehavior} websocketBehavior uWebSockets.js websocket behavior and options\n   */\n  constructor(uwsServer:UWSTemplatedApp, websocketPattern?:string = '/*', websocketBehavior?: Object = { compression: 0, closeOnBackpressureLimit: false, maxPayloadLength: MAX_PAYLOAD_LENGTH, maxBackpressure: MAX_BACKPRESSURE, idleTimeout: 56 }, options?: { id?: number } = {}) {\n    super();\n\n    this.messageHashes = new LruCache({ max: 500 });\n\n    if (typeof websocketBehavior.maxPayloadLength !== 'number') {\n      websocketBehavior.maxPayloadLength = MAX_PAYLOAD_LENGTH; // eslint-disable-line no-param-reassign\n    }\n\n    if (typeof websocketBehavior.maxBackpressure !== 'number') {\n      websocketBehavior.maxBackpressure = MAX_BACKPRESSURE; // eslint-disable-line no-param-reassign\n    }\n\n    this.maxPayloadLength = websocketBehavior.maxPayloadLength;\n    this.maxBackpressure = websocketBehavior.maxBackpressure;\n\n    // Values set using setData and deleteData are compared against hashes to prevent\n    // redundant writes\n    this.shouldDeduplicate = false;\n\n    this.recordHashes = new Map();\n    this.recordHashObjects = new Set();\n\n    // Added as a data set handler when deduplication is active\n    // A reference to the original object is temporarily added to a\n    // set to distinguish between local objects and clones of remote objects\n    // This prevents having to calculate the object hash twice\n    this.updateHashOnSet = (name:string, data:any) => {\n      if (this.recordHashObjects.has(data)) {\n        this.recordHashObjects.delete(data);\n      } else {\n        const hash = hash64(data);\n        this.recordHashes.set(name, hash);\n      }\n    };\n\n    // Added as a data delete handler when deduplication is active\n    this.updateHashOnDelete = (name:string) => {\n      this.recordHashes.delete(name);\n    };\n\n    // Multipart message container merge promises\n    //   Key: id\n    //   Value: MergeChunksPromise\n    this.mergeChunkPromises = new Map();\n\n    // Socket drain callbacks\n    //   Key: Socket ID\n    //   Value: [Array of callbacks, Array of Errbacks]\n    this.drainCallbacks = new Map();\n\n    // Primary data object, used by all peers and partially shared with subscribers\n    this.data = new ObservedRemoveMap([], { bufferPublishing: 0 });\n\n    // Peer connections map, each peer stores the peers it is connected to\n    //   Key: Peer ID\n    //   Value: Array of peer IDs\n    this.peers = new ObservedRemoveMap([], { bufferPublishing: 0 });\n\n    // Provider map, each peer stores regex strings it can provide data for\n    //   Key: Peer ID\n    //   Value: Array of regex strings\n    this.providers = new ObservedRemoveMap([], { bufferPublishing: 0 });\n\n    // Active provider map for each key\n    //   Key: key\n    //   Value: [Peer ID, regex string]\n    this.activeProviders = new ObservedRemoveMap([], { bufferPublishing: 0 });\n\n    // Receiver map, each peer stores regex strings it can receive messages from publishers for\n    //   Key: key\n    //   Value: [Peer ID, regex string]\n    this.receivers = new ObservedRemoveMap([], { bufferPublishing: 0 });\n\n    // Peers which are currently subscribed to a key\n    //   Values: [peerId, key]\n    this.peerSubscriptions = new ObservedRemoveSet([], { bufferPublishing: 0 });\n\n    // Peer subscriber map for each key\n    //   Key: key\n    //   Value: Array of Peer IDs\n    this.peerSubscriptionMap = new Map();\n\n    // Matcher functions for each provider\n    //   Key: Peer ID\n    //   Value: Array of regex strings, regex objects pairs\n    this.providerRegexes = new Map();\n\n    // Callbacks for providing / unproviding\n    //   Key: regex strings\n    //   Value: Callback function\n    this.provideCallbacks = new Map();\n\n    // Options for providing / unproviding\n    //   Key: regex strings\n    //   Value: Object\n    this.provideOptions = new Map();\n\n    // Debounce timeouts for providers\n    //   Key: key\n    //   Value: TimeoutId\n    this.provideDebounceTimeouts = new Map();\n\n    // Matcher functions for each receiver\n    //   Key: Peer ID\n    //   Value: Array of regex strings, regex objects pairs\n    this.receiverRegexes = new Map();\n\n    // Callbacks for receiving / unreceiving\n    //   Key: regex strings\n    //   Value: [Message callback function, Open callback function, Close callback function]\n    this.receiveCallbacks = new Map();\n\n    // Tracks relationships of publishing socket / key pairs to publishing servers\n    this.receiverServers = new PublisherServerManager();\n\n    // Tracks relationships of publishing socket / key pairs to publishing regexes\n    this.receiverSessions = new PublisherSessionManager();\n\n    // Tracks relationships of publishing socket / key pairs to receiving regexes\n    this.publisherSessions = new PublisherSessionManager();\n\n    // Tracks relationships of publishing socket / key pairs to receiving servers\n    this.publisherServers = new PublisherServerManager();\n\n    // Active (incoming) sockets\n    //   Key: Socket ID\n    //   Value: Socket object\n    this.sockets = new Map();\n\n    // Promise queue of incoming crendential authentication requests\n    //   Key: Socket ID\n    //   Value: Promise Queue\n    this.socketCredentialQueues = new Map();\n\n    // Map of Peer IDs to Socket IDs\n    //   Source: Socket ID\n    //   Target: Peer ID\n    this.peerSockets = new DirectedGraphMap();\n\n    // Active (outgoing) peer connections\n    //   Key: Peer ID\n    //   Value: Connection Object\n    this.peerConnections = new Map();\n\n    // Active subscriptions\n    //   Source: Socket ID\n    //   Target: Key\n    this.subscriptions = new DirectedGraphMap();\n\n    // Active publishers\n    //   Source: Socket ID\n    //   Target: Key\n    this.publishers = new DirectedGraphMap();\n\n    // Active event subscriptions\n    //   Source: Socket ID\n    //   Target: Event Name\n    this.eventSubscriptions = new DirectedGraphMap();\n\n    // Keys without subscribers that should be flushed from data\n    //   Key: key\n    //   Value: Timestamp when the key should be deleted\n    this.keysForDeletion = new Map();\n\n    // Peer reconnection timeouts\n    //   Key: Peer ID\n    //   Value: TimeoutID\n    this.peerReconnectTimeouts = new Map();\n\n    // User defined observed remove maps\n    //   Key: string\n    //   Value: ObservedRemoveMap\n    this._customMaps = new Map(); // eslint-disable-line no-underscore-dangle\n\n    // User defined observed remove sets\n    //   Key: string\n    //   Value: ObservedRemoveSet\n    this._customSets = new Map(); // eslint-disable-line no-underscore-dangle\n\n    const mapsGetter = (target:{[string]: ObservedRemoveMap<string, any>}, name:string) => {\n      const existing = this._customMaps.get(name); // eslint-disable-line no-underscore-dangle\n      if (typeof existing !== 'undefined') {\n        return existing;\n      }\n      const map = new ObservedRemoveMap([], { bufferPublishing: 0 });\n      map.on('publish', (queue:[Array<*>, Array<*>]) => {\n        this.publishToPeers(new CustomMapDump(name, queue, [this.id]));\n      });\n      this._customMaps.set(name, map); // eslint-disable-line no-underscore-dangle\n      return map;\n    };\n\n    this.maps = new Proxy({}, {\n      get: mapsGetter,\n      set() {\n        throw new TypeError('Can not set Server.maps values');\n      },\n    });\n\n    const setsGetter = (target:{[string]: ObservedRemoveSet<any>}, name:string) => {\n      const existing = this._customSets.get(name); // eslint-disable-line no-underscore-dangle\n      if (typeof existing !== 'undefined') {\n        return existing;\n      }\n      const set = new ObservedRemoveSet([], { bufferPublishing: 0 });\n      set.on('publish', (queue:[Array<*>, Array<*>]) => {\n        this.publishToPeers(new CustomSetDump(name, queue, [this.id]));\n      });\n      this._customSets.set(name, set); // eslint-disable-line no-underscore-dangle\n      return set;\n    };\n\n    this.sets = new Proxy({}, {\n      get: setsGetter,\n      set() {\n        throw new TypeError('Can not set Server.sets values');\n      },\n    });\n\n    this.id = typeof options.id === 'number' ? options.id : randomInteger();\n\n    this.logger = makeLogger(`Braid Server ${this.id}`);\n\n    this.isClosing = false;\n\n    this.flushInterval = setInterval(() => {\n      this.data.flush();\n      this.peers.flush();\n      this.providers.flush();\n      this.receivers.flush();\n      this.activeProviders.flush();\n      this.peerSubscriptions.flush();\n      for (const customMap of this._customMaps.values()) { // eslint-disable-line no-underscore-dangle\n        customMap.flush();\n      }\n    }, 10000);\n\n    this.keyFlushInterval = setInterval(() => {\n      const now = Date.now();\n      for (const [key, timestamp] of this.keysForDeletion) {\n        if (timestamp < now) {\n          this.keysForDeletion.delete(key);\n          this.data.delete(key);\n        }\n      }\n    }, 3600000);\n\n    this.setCredentialsHandler(async (credentials: Object) => // eslint-disable-line no-unused-vars\n      ({ success: true, code: 200, message: 'OK' }),\n    );\n    this.setPeerRequestHandler(async (credentials: Object) => // eslint-disable-line no-unused-vars\n      ({ success: true, code: 200, message: 'OK' }),\n    );\n    this.setSubscribeRequestHandler(async (key:string, credentials: Object) => // eslint-disable-line no-unused-vars\n      ({ success: true, code: 200, message: 'OK' }),\n    );\n    this.setEventSubscribeRequestHandler(async (name:string, credentials: Object) => // eslint-disable-line no-unused-vars\n      ({ success: true, code: 200, message: 'OK' }),\n    );\n    this.setPublishRequestHandler(async (key:string, credentials: Object) => // eslint-disable-line no-unused-vars\n      ({ success: true, code: 200, message: 'OK' }),\n    );\n    this.data.on('publish', (queue:[Array<*>, Array<*>]) => {\n      this.publishToPeers(new DataDump(queue, [this.id]));\n      this.publishData(queue);\n    });\n    this.providers.on('publish', (queue:[Array<*>, Array<*>]) => {\n      this.publishToPeers(new ProviderDump(queue, [this.id]));\n    });\n    this.activeProviders.on('publish', (queue:[Array<*>, Array<*>]) => {\n      this.publishToPeers(new ActiveProviderDump(queue, [this.id]));\n    });\n    this.receivers.on('publish', (queue:[Array<*>, Array<*>]) => {\n      this.publishToPeers(new ReceiverDump(queue, [this.id]));\n    });\n    this.peers.on('publish', (queue:[Array<*>, Array<*>]) => {\n      this.publishToPeers(new PeerDump(queue, [this.id]));\n    });\n    this.peerSubscriptions.on('publish', (queue:[Array<*>, Array<*>]) => {\n      this.publishToPeers(new PeerSubscriptionDump(queue, [this.id]));\n    });\n    this.peerSubscriptions.on('add', ([peerId, key]) => {\n      let peerIds = this.peerSubscriptionMap.get(key);\n      this.keysForDeletion.delete(key);\n      if (!peerIds) {\n        peerIds = new Set();\n        this.peerSubscriptionMap.set(key, peerIds);\n        if (!this.activeProviders.has(key)) {\n          this.assignProvider(key);\n        }\n      }\n      peerIds.add(peerId);\n      clearTimeout(this.provideDebounceTimeouts.get(key));\n      this.provideDebounceTimeouts.delete(key);\n    });\n    this.peerSubscriptions.on('delete', ([peerId, key]) => {\n      const removeActiveProvider = () => {\n        clearTimeout(this.provideDebounceTimeouts.get(key));\n        this.provideDebounceTimeouts.delete(key);\n        const peerIds = this.peerSubscriptionMap.get(key);\n        if (!peerIds) {\n          return;\n        }\n        peerIds.delete(peerId);\n        if (peerIds.size === 0) {\n          this.peerSubscriptionMap.delete(key);\n          this.activeProviders.delete(key);\n          this.keysForDeletion.set(key, Date.now() + 86400000);\n        }\n      };\n      clearTimeout(this.provideDebounceTimeouts.get(key));\n      this.provideDebounceTimeouts.delete(key);\n      const peerIdAndRegexString = this.activeProviders.get(key);\n      if (!peerIdAndRegexString) {\n        removeActiveProvider();\n        return;\n      }\n      const regexString = peerIdAndRegexString[1];\n      const provideOptions = this.provideOptions.get(regexString);\n      if (provideOptions && typeof provideOptions.debounce === 'number') {\n        this.provideDebounceTimeouts.set(key, setTimeout(removeActiveProvider, provideOptions.debounce));\n      } else {\n        removeActiveProvider();\n      }\n    });\n    this.peers.on('set', (peerId, peerIds, previousPeerIds) => {\n      if (this.id !== peerId && peerIds && previousPeerIds && peerIds.length < previousPeerIds.length) {\n        this.prunePeers();\n      }\n    });\n    this.activeProviders.on('set', (key:string, [peerId:number, regexString:string], previousPeerIdAndRegexString?: [number, string]) => {\n      if (this.id === peerId) {\n        const callback = this.provideCallbacks.get(regexString);\n        if (!callback) {\n          this.unprovide(regexString);\n          return;\n        }\n        if (!previousPeerIdAndRegexString || previousPeerIdAndRegexString[0] !== this.id) {\n          callback(key, true);\n        }\n      } else if (previousPeerIdAndRegexString) {\n        const [previousPeerId, previousRegexString] = previousPeerIdAndRegexString;\n        if (previousPeerId === peerId) {\n          return;\n        }\n        if (previousPeerId === this.id) {\n          const callback = this.provideCallbacks.get(previousRegexString);\n          if (callback) {\n            callback(key, false);\n          } else {\n            this.unprovide(previousRegexString);\n          }\n        }\n      }\n    });\n    this.activeProviders.on('delete', (key:string, [peerId:number, regexString:string]) => {\n      if (this.id === peerId) {\n        const callback = this.provideCallbacks.get(regexString);\n        if (callback) {\n          callback(key, false);\n        } else {\n          this.unprovide(regexString);\n        }\n      }\n    });\n    this.providers.on('set', (peerId:number, regexStrings:Array<string>) => {\n      const regexPairs = regexStrings.map((regexString) => [regexString, new RegExp(regexString)]);\n      this.providerRegexes.set(peerId, regexPairs);\n      if (this.id !== peerId) {\n        return;\n      }\n      const keysWithoutProviders = [...this.peerSubscriptionMap.keys()].filter((key) => !this.activeProviders.has(key));\n      for (const regexPair of regexPairs) {\n        const regex = regexPair[1];\n        for (const key of keysWithoutProviders) {\n          if (regex.test(key)) {\n            this.assignProvider(key);\n          }\n        }\n      }\n    });\n    this.providers.on('delete', (peerId:number) => {\n      this.providerRegexes.delete(peerId);\n    });\n    this.receivers.on('set', (peerId:number, regexStrings:Array<string>, previousRegexStrings?:Array<string>) => {\n      const regexMap = new Map(regexStrings.map((regexString) => [regexString, new RegExp(regexString)]));\n      this.receiverRegexes.set(peerId, regexMap);\n      if (Array.isArray(previousRegexStrings)) {\n        for (const previousRegexString of previousRegexStrings) {\n          if (regexStrings.includes(previousRegexString)) {\n            continue;\n          }\n          for (const [key, serverId, socketId] of this.publisherSessions.publishers(previousRegexString)) { // eslint-disable-line no-unused-vars\n            this.unassignReceiver(key, socketId);\n          }\n        }\n      }\n      for (const [socketId, key] of this.publishers) {\n        if (this.receiverServers.hasPublisher(key, socketId)) {\n          continue;\n        }\n        this.assignReceiver(key, socketId);\n      }\n    });\n    this.receivers.on('delete', (peerId:number) => {\n      this.receiverRegexes.delete(peerId);\n      const publishers = this.receiverServers.publishers(peerId);\n      for (const [key, socketId] of publishers) {\n        this.unassignReceiver(key, socketId);\n      }\n      for (const [socketId, key] of this.publishers) {\n        if (this.receiverServers.hasPublisher(key, socketId)) {\n          continue;\n        }\n        this.assignReceiver(key, socketId);\n      }\n    });\n    const websocketOptions = Object.assign({}, websocketBehavior, {\n      upgrade: (res, req, context) => { // eslint-disable-line no-unused-vars\n        if (this.isClosing) {\n          res.writeStatus('410');\n          res.end('Closing');\n          return;\n        }\n        try {\n          const socketId = randomInteger();\n          const socketIp = requestIp(res, req);\n          const socketOptions = {\n            id: socketId,\n            credentials: {\n              ip: socketIp,\n            },\n          };\n          res.upgrade(socketOptions, req.getHeader('sec-websocket-key'), req.getHeader('sec-websocket-protocol'), req.getHeader('sec-websocket-extensions'), context);\n          this.logger.info(`Upgraded socket at ${socketIp || 'with unknown IP'}`);\n        } catch (error) {\n          if (error.stack) {\n            this.logger.error('Error during socket upgrade:');\n            error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n          } else {\n            this.logger.error(`Error during socket upgrade: ${error.message}`);\n          }\n        }\n      },\n      drain: (ws) => {\n        const socketId = ws.id;\n        try {\n          if (!socketId) {\n            this.logger.error('Received socket drain without socket ID');\n            return;\n          }\n          const values = this.drainCallbacks.get(socketId);\n          if (typeof values === 'undefined') {\n            return;\n          }\n          const [callbacks] = values;\n          for (const callback of callbacks) {\n            callback();\n          }\n          this.drainCallbacks.delete(socketId);\n        } catch (error) {\n          if (error.stack) {\n            this.logger.error(`Error in drain callback from socket ${socketId}:`);\n            error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n          } else {\n            this.logger.error(`Error in drain callback from socket ${socketId}: ${error.message}`);\n          }\n        }\n      },\n      open: (ws) => { // eslint-disable-line no-unused-vars\n        const socketId = ws.id;\n        const { ip } = ws.credentials || {};\n        try {\n          if (!socketId) {\n            this.logger.error('Received socket open without socket ID');\n            return;\n          }\n          this.sockets.set(socketId, ws);\n          this.emit('open', socketId);\n          this.logger.info(`Opened socket at ${ip || 'unknown IP'} (${socketId})`);\n        } catch (error) {\n          if (error.stack) {\n            this.logger.error('Error during socket open:');\n            error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n          } else {\n            this.logger.error(`Error during socket open: ${error.message}`);\n          }\n        }\n      },\n      message: (ws, data, isBinary) => {\n        const socketId = ws.id;\n        try {\n          if (this.isClosing) {\n            return;\n          }\n          if (!socketId) {\n            this.logger.error('Received message without socket ID');\n            return;\n          }\n          if (!isBinary) {\n            this.logger.error(`Received non-binary message from ${ws.credentials.ip ? ws.credentials.ip : 'unknown IP'} (${socketId}): ${data.toString()}`);\n            return;\n          }\n          const message = decode(Buffer.from(data));\n          if (message instanceof DataDump || message instanceof PeerDump || message instanceof ProviderDump || message instanceof ActiveProviderDump || message instanceof ReceiverDump || message instanceof PeerSubscriptionDump || message instanceof PeerSync || message instanceof PeerSyncResponse || message instanceof BraidEvent || message instanceof BraidSocketEvent || message instanceof PublisherOpen || message instanceof PublisherClose || message instanceof PublisherPeerMessage || message instanceof MultipartContainer || message instanceof DataSyncInsertions || message instanceof DataSyncDeletions || message instanceof CustomMapDump || message instanceof CustomSetDump) {\n            if (!this.peerSockets.hasSource(socketId)) {\n              this.logger.error(`Received dump from non-peer at ${ws.credentials.ip ? ws.credentials.ip : 'unknown IP'} (${socketId})`);\n              return;\n            }\n            for (const peerId of this.peerSockets.getTargets(socketId)) {\n              this.handleMessage(message, peerId);\n            }\n          }\n          if (message instanceof Credentials) {\n            this.handleCredentialsRequest(socketId, ws.credentials, message.value);\n          } else if (message instanceof PeerRequest) {\n            this.handlePeerRequest(socketId, ws.credentials, message.value);\n          } else if (message instanceof SubscribeRequest) {\n            this.handleSubscribeRequest(socketId, ws.credentials, message.value);\n          } else if (message instanceof Unsubscribe) {\n            this.removeSubscription(socketId, message.value);\n          } else if (message instanceof EventSubscribeRequest) {\n            this.handleEventSubscribeRequest(socketId, ws.credentials, message.value);\n          } else if (message instanceof EventUnsubscribe) {\n            this.removeEventSubscription(socketId, message.value);\n          } else if (message instanceof PublishRequest) {\n            this.handlePublishRequest(socketId, ws.credentials, message.value);\n          } else if (message instanceof Unpublish) {\n            this.removePublisher(socketId, message.value);\n          } else if (message instanceof PublisherMessage) {\n            this.handlePublisherMessage(message.key, socketId, message.message);\n          }\n        } catch (error) {\n          if (error.stack) {\n            this.logger.error(`Error when receiving message from socket ${socketId}:`);\n            error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n          } else {\n            this.logger.error(`Error when receiving socket message from socket ${socketId}: ${error.message}`);\n          }\n          if (error instanceof TypeError && error.message.indexOf('currentExtensions') !== -1) {\n            if (!ws.sentPrevousGeneration) {\n              ws.sentPrevousGeneration = true; // eslint-disable-line no-param-reassign\n              ws.send(previousGenerationCredentialsResponse, true, false);\n              this.logger.info(`Sending reload event to socket ${socketId} using old messagepack version`);\n              setTimeout(() => {\n                if (this.sockets.has(socketId)) {\n                  ws.send(previousGenerationReloadResponse, true, false);\n                }\n              }, 5000);\n            }\n          }\n        }\n      },\n      close: (ws, code, data) => { // eslint-disable-line no-unused-vars\n        const socketId = ws.id;\n        try {\n          if (!socketId) {\n            this.logger.error('Received close without socket ID');\n            return;\n          }\n          this.removeSubscriptions(socketId);\n          this.removePublishers(socketId);\n          this.removeEventSubscriptions(socketId);\n          if (this.peerSockets.hasSource(socketId)) {\n            const peerIds = this.peerSockets.getTargets(socketId);\n            this.peerSockets.removeSource(socketId);\n            for (const peerId of peerIds) {\n              this.emit('removePeer', peerId);\n            }\n            this.updatePeers();\n            this.prunePeers();\n          }\n          this.sockets.delete(socketId);\n          this.logger.info(`Closed socket at ${ws.credentials.ip ? ws.credentials.ip : 'unknown IP'} (${socketId}), code ${code}`);\n          const { credentials } = ws;\n          if (credentials && credentials.client) {\n            this.emit('presence', credentials, false, socketId, false);\n          }\n          this.emit('close', socketId);\n          delete ws.id; // eslint-disable-line no-param-reassign\n          delete ws.credentials; // eslint-disable-line no-param-reassign\n        } catch (error) {\n          if (error.stack) {\n            this.logger.error(`Error when receiving close event from socket ${socketId}:`);\n            error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n          } else {\n            this.logger.error(`Error when receiving close event from socket ${socketId}: ${error.message}`);\n          }\n        }\n      },\n    });\n    uwsServer.ws(websocketPattern, websocketOptions);\n    this.setMaxListeners(0);\n    this.logger.info(`Native acceleration is ${isNativeAccelerationEnabled ? 'enabled' : 'not enabled'}`);\n  }\n\n  encode(value:any):Buffer {\n    try {\n      return encode(value);\n    } catch (error) {\n      this.logger.error(`Unable to encode ${JSON.stringify(value)}`);\n      throw error;\n    }\n  }\n\n  async handleMultipartContainer(multipartContainer:MultipartContainer, peerId: number) {\n    const existingMergeChunksPromise = this.mergeChunkPromises.get(multipartContainer.id);\n    if (typeof existingMergeChunksPromise !== 'undefined') {\n      existingMergeChunksPromise.push(multipartContainer);\n      return;\n    }\n    const mergeChunksPromise = MultipartContainer.getMergeChunksPromise(60000);\n    mergeChunksPromise.push(multipartContainer);\n    this.mergeChunkPromises.set(multipartContainer.id, mergeChunksPromise);\n    try {\n      const buffer = await mergeChunksPromise;\n      const message = decode(buffer);\n      this.handleMessage(message, peerId);\n    } catch (error) {\n      if (error.stack) {\n        this.logger.error('Unable to merge multipart message chunks:');\n        error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n      } else {\n        this.logger.error(`Unable to merge multipart message chunks: ${error.message}`);\n      }\n    } finally {\n      this.mergeChunkPromises.delete(multipartContainer.id);\n    }\n  }\n\n  async waitForDrain(socketId:number) {\n    const socket = this.sockets.get(socketId);\n    if (!socket) {\n      throw new Error(`Can wait for socket ${socketId} to drain, socket does not exist`);\n    }\n    if (socket.getBufferedAmount() > this.maxBackpressure) {\n      await new Promise((resolve, reject) => {\n        const [callbacks, errbacks] = this.drainCallbacks.get(socketId) || [[], []];\n        callbacks.push(resolve);\n        errbacks.push(reject);\n        this.drainCallbacks.set(socketId, [callbacks, errbacks]);\n      });\n    }\n  }\n\n  set(name:string, data:any) {\n    if (this.shouldDeduplicate) {\n      const hash = hash64(data);\n      if (this.recordHashes.get(name) !== hash) {\n        this.recordHashObjects.add(data);\n        this.data.set(name, data);\n        this.recordHashes.set(name, hash);\n      }\n    } else {\n      this.data.set(name, data);\n    }\n  }\n\n  delete(name:string) {\n    this.data.set(name, undefined);\n  }\n\n  get deduplicate():boolean {\n    return this.shouldDeduplicate;\n  }\n\n  set deduplicate(active:boolean) {\n    if (typeof active !== 'boolean') {\n      throw new TypeError(`Unable to set deduplicate to type ${typeof active}`);\n    }\n    if (active === this.shouldDeduplicate) {\n      return;\n    }\n    if (active) {\n      this.data.on('set', this.updateHashOnSet);\n      this.data.on('delete', this.updateHashOnDelete);\n    } else {\n      this.data.off('set', this.updateHashOnSet);\n      this.data.off('delete', this.updateHashOnDelete);\n    }\n    this.shouldDeduplicate = active;\n  }\n\n  emitToClients(name: string, ...args:Array<any>) {\n    const id = uuidv4();\n    this.publishEvent(name, args, id);\n    this.publishToPeers(new BraidEvent(name, args, id, [this.id]));\n  }\n\n  emitToSocket(name: string, peerId:number, socketId:number, ...args:Array<any>) {\n    const id = uuidv4();\n    if (this.id === peerId) {\n      this.publishSocketEvent(name, args, socketId, id);\n    } else {\n      this.publishToPeers(new BraidSocketEvent(name, args, peerId, socketId, id, [this.id]));\n    }\n  }\n\n  /**\n   * Throw an error if any internal data exists. Intended for tests and debugging.\n   * @return {void}\n   */\n  throwOnLeakedReferences() {\n    if (this.sockets.size > 0) {\n      throw new Error(`${this.id}: ${this.sockets.size} referenced sockets`);\n    }\n    if (this.peerSockets.size > 0) {\n      throw new Error(`${this.id}: ${this.peerSockets.size} referenced peer sockets`);\n    }\n    if (this.peerConnections.size > 0) {\n      throw new Error(`${this.id}: ${this.peerConnections.size} referenced peer connections`);\n    }\n    if (this.peers.size > 0) {\n      throw new Error(`${this.id}: ${this.peers.size} referenced peers`);\n    }\n    if (this.providers.size > 0) {\n      throw new Error(`${this.id}: ${this.providers.size} referenced providers`);\n    }\n    if (this.providerRegexes.size > 0) {\n      throw new Error(`${this.id}: ${this.providerRegexes.size} referenced provider regexes`);\n    }\n    if (this.subscriptions.size > 0) {\n      throw new Error(`${this.id}: ${this.subscriptions.size} referenced subscribers`);\n    }\n    if (this.eventSubscriptions.size > 0) {\n      throw new Error(`${this.id}: ${this.eventSubscriptions.size} referenced event subscribers`);\n    }\n    if (this.peerSubscriptions.size > 0) {\n      throw new Error(`${this.id}: ${this.peerSubscriptions.size} referenced peer subscription`);\n    }\n    if (this.activeProviders.size > 0) {\n      throw new Error(`${this.id}: ${this.activeProviders.size} referenced active providers`);\n    }\n    if (this.provideCallbacks.size > 0) {\n      throw new Error(`${this.id}: ${this.provideCallbacks.size} referenced provide callbacks`);\n    }\n    if (this.provideOptions.size > 0) {\n      throw new Error(`${this.id}: ${this.provideOptions.size} referenced provide options`);\n    }\n    if (this.provideDebounceTimeouts.size > 0) {\n      throw new Error(`${this.id}: ${this.provideDebounceTimeouts.size} referenced provide debounce timeouts`);\n    }\n    if (this.publishers.size > 0) {\n      throw new Error(`${this.id}: ${this.publishers.size} referenced publishers`);\n    }\n    if (this.receivers.size > 0) {\n      throw new Error(`${this.id}: ${this.receivers.size} referenced receivers`);\n    }\n    if (this.receiverRegexes.size > 0) {\n      throw new Error(`${this.id}: ${this.receiverRegexes.size} referenced receiver regexes`);\n    }\n    if (this.receiveCallbacks.size > 0) {\n      throw new Error(`${this.id}: ${this.receiveCallbacks.size} referenced receiver callbacks`);\n    }\n    if (this.receiverServers.size > 0) {\n      throw new Error(`${this.id}: ${this.receiverServers.size} referenced active receivers`);\n    }\n    if (this.receiverSessions.size > 0) {\n      throw new Error(`${this.id}: ${this.receiverSessions.size} referenced receive sessions`);\n    }\n    if (this.publisherServers.size > 0) {\n      throw new Error(`${this.id}: ${this.publisherServers.size} referenced publisher servers`);\n    }\n    if (this.publisherSessions.size > 0) {\n      throw new Error(`${this.id}: ${this.publisherSessions.size} referenced publisher sessions`);\n    }\n  }\n\n  /**\n   * Publish objects to peers.\n   * @param {ProviderDump|DataDump|ActiveProviderDump|ReceiverDump|PeerDump|PeerSubscriptionDump} obj - Object to send, should have \"ids\" property\n   * @return {void}\n   */\n  publishToPeers(obj:ProviderDump|DataDump|ActiveProviderDump|ReceiverDump|PeerDump|PeerSubscriptionDump|BraidEvent|BraidSocketEvent|CustomMapDump|CustomSetDump) {\n    const peerIds = obj.ids;\n    const peerConnections = [];\n    const peerUWSSockets = [];\n    for (const [socketId, peerId] of this.peerSockets.edges) {\n      if (peerIds.includes(peerId)) {\n        continue;\n      }\n      const ws = this.sockets.get(socketId);\n      if (!ws) {\n        continue;\n      }\n      peerIds.push(peerId);\n      peerUWSSockets.push(ws);\n    }\n    for (const [peerId, { ws }] of this.peerConnections) {\n      if (peerIds.includes(peerId)) {\n        continue;\n      }\n      if (ws.readyState === 1) {\n        peerIds.push(peerId);\n        peerConnections.push(ws);\n      }\n    }\n    if (peerConnections.length === 0 && peerUWSSockets.length === 0) {\n      return;\n    }\n    const encoded = this.encode(obj);\n    for (const ws of peerConnections) {\n      ws.send(encoded);\n    }\n    for (const ws of peerUWSSockets) {\n      ws.send(encoded, true, false);\n    }\n  }\n\n  /**\n   * Send objects to a peer.\n   * @param {string} peerId - Peer ID to send to\n   * @param {PublisherOpen|PublisherClose|PublisherPeerMessage} obj - Object to send\n   * @return {void}\n   */\n  sendToPeer(peerId:number, obj:PublisherOpen|PublisherClose|PublisherPeerMessage) {\n    const encoded = this.encode(obj);\n    const peerConnection = this.peerConnections.get(peerId);\n    if (peerConnection) {\n      const { ws } = peerConnection;\n      ws.send(encoded);\n      return;\n    }\n    for (const socketId of this.peerSockets.getSources(peerId)) {\n      const ws = this.sockets.get(socketId);\n      if (ws) {\n        ws.send(encoded, true, false);\n      }\n    }\n  }\n\n  /**\n   * Set the credentials handler. The handler evaluates and modifies credentials provided by peers and clients when they are initially provided.\n   * @param {(credentials: Object) => Promise<{ success: boolean, code: number, message: string }>} func - Credentials handler.\n   * @return {void}\n   */\n  setCredentialsHandler(func: (credentials: Object) => Promise<{ success: boolean, code: number, message: string }>) { // eslint-disable-line no-unused-vars\n    this.credentialsHandler = func;\n  }\n\n  /**\n   * Set the peer request handler. Approves or denies peer request handlers.\n   * @param {(credentials: Object) => Promise<{ success: boolean, code: number, message: string }>} func - Peer request handler.\n   * @return {void}\n   */\n  setPeerRequestHandler(func: (credentials: Object) => Promise<{ success: boolean, code: number, message: string }>) { // eslint-disable-line no-unused-vars\n    this.peerRequestHandler = func;\n  }\n\n  /**\n   * Set the subscribe request handler. Approves or denies subscribe requests.\n   * @param {(credentials: Object) => Promise<{ success: boolean, code: number, message: string }>} func - Subscription request handler.\n   * @return {void}\n   */\n  setSubscribeRequestHandler(func: (key:string, credentials: Object) => Promise<{ success: boolean, code: number, message: string }>) { // eslint-disable-line no-unused-vars\n    this.subscribeRequestHandler = func;\n  }\n\n  /**\n   * Set the event subscribe request handler. Approves or denies event subscribe requests.\n   * @param {(credentials: Object) => Promise<{ success: boolean, code: number, message: string }>} func - Event subscription request handler.\n   * @return {void}\n   */\n  setEventSubscribeRequestHandler(func: (name:string, credentials: Object) => Promise<{ success: boolean, code: number, message: string }>) { // eslint-disable-line no-unused-vars\n    this.eventSubscribeRequestHandler = func;\n  }\n\n  /**\n   * Set the publish request handler. Approves or denies publish requests.\n   * @param {(credentials: Object) => Promise<{ success: boolean, code: number, message: string }>} func - Publish request handler.\n   * @return {void}\n   */\n  setPublishRequestHandler(func: (key:string, credentials: Object) => Promise<{ success: boolean, code: number, message: string }>) { // eslint-disable-line no-unused-vars\n    this.publishRequestHandler = func;\n  }\n\n  /**\n   * Top level handler for incoming credentials messages. Uses the default/custom credentialsHandler method to validate.\n   * @param {number} socketId Socket ID from which the credentials were received\n   * @param {Object} credentials Credentials object\n   * @param {Object} newClientCredentials Credentials object provided by the client\n   * @return {void}\n   */\n  handleCredentialsRequest(socketId: number, credentials: Object, newClientCredentials: Object) {\n    const queue = this.socketCredentialQueues.get(socketId);\n    if (typeof queue !== 'undefined') {\n      queue.add(() => this._handleCredentialsRequest(socketId, credentials, newClientCredentials)); // eslint-disable-line no-underscore-dangle\n      return;\n    }\n    const newQueue = new PQueue({ concurrency: 1 });\n    newQueue.add(() => this._handleCredentialsRequest(socketId, credentials, newClientCredentials)); // eslint-disable-line no-underscore-dangle\n    this.socketCredentialQueues.set(socketId, newQueue);\n    newQueue.onIdle().then(() => {\n      this.socketCredentialQueues.delete(socketId);\n    });\n  }\n\n  async _handleCredentialsRequest(socketId: number, credentials: Object, newClientCredentials: Object) {\n    const credentialsDidUpdate = !!credentials.client;\n    if (credentialsDidUpdate) {\n      this.emit('presence', credentials, false, socketId, credentialsDidUpdate);\n      // Wait a tick for presence events\n      await new Promise((resolve) => setImmediate(resolve));\n    }\n    const clientCredentials = credentials.client;\n    if (typeof clientCredentials === 'undefined') {\n      credentials.client = newClientCredentials; // eslint-disable-line  no-param-reassign\n    } else {\n      for (const key of Object.getOwnPropertyNames(clientCredentials)) {\n        delete clientCredentials[key];\n      }\n      merge(clientCredentials, newClientCredentials);\n    }\n    let response;\n    try {\n      response = await this.credentialsHandler(credentials);\n    } catch (error) {\n      if (error.stack) {\n        this.logger.error('Credentials request handler error:');\n        error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n      } else {\n        this.logger.error(`Credentials request handler error: ${error.message}`);\n      }\n      response = { success: false, code: 500, message: 'Credentials request handler error' };\n    }\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      this.logger.error(`Cannot respond to credentials request from socket ID ${socketId}, socket does not exist`);\n      return;\n    }\n    if (response.success) {\n      this.logger.info(`Credentials from ${ws.credentials && ws.credentials.ip ? ws.credentials.ip : 'with unknown IP'} (${socketId}) accepted`);\n      this.emit('presence', credentials, true, socketId, credentialsDidUpdate);\n    } else {\n      this.logger.info(`Credentials from ${ws.credentials && ws.credentials.ip ? ws.credentials.ip : 'with unknown IP'} (${socketId}) rejected`);\n    }\n    const unencoded = new CredentialsResponse({ success: response.success, code: response.code, message: response.message });\n    ws.send(this.encode(unencoded), true, false);\n  }\n\n  /**\n   * Top level handler for incoming peer request messages. Uses the default/custom peerRequestHandler method to validate.\n   * @param {number} socketId Socket ID from which the request was received\n   * @param {Object} credentials Credentials object\n   * @param {Object} peerId Peer ID provided by the client\n   * @return {void}\n   */\n  async handlePeerRequest(socketId: number, credentials: Object, peerId:number) {\n    if (this.peerConnections.has(peerId)) {\n      const wsA = this.sockets.get(socketId);\n      if (!wsA) {\n        this.logger.error(`Cannot respond to peer request from socket ID ${socketId}, socket does not exist`);\n        return;\n      }\n      this.logger.warn(`Peer request from ${wsA.credentials && wsA.credentials.ip ? wsA.credentials.ip : 'with unknown IP'} (${socketId}) rejected, connection to peer ${peerId} already exists`);\n      const unencoded = new PeerResponse({ id: this.id, success: false, code: 801, message: `Connection to peer ${peerId} already exists` });\n      wsA.send(this.encode(unencoded), true, false);\n      return;\n    }\n    if (this.peerSockets.hasTarget(peerId)) {\n      const wsA = this.sockets.get(socketId);\n      if (!wsA) {\n        this.logger.error(`Cannot respond to peer request from socket ID ${socketId}, socket does not exist`);\n        return;\n      }\n      this.logger.warn(`Peer request from ${wsA.credentials && wsA.credentials.ip ? wsA.credentials.ip : 'with unknown IP'} (${socketId}) rejected, connection to peer ${peerId} already exists`);\n      const unencoded = new PeerResponse({ id: this.id, success: false, code: 802, message: `Socket to peer ${peerId} already exists` });\n      wsA.send(this.encode(unencoded), true, false);\n      return;\n    }\n    await this.waitForSocketCredentialQueue(socketId);\n    let response;\n    try {\n      response = await this.peerRequestHandler(credentials);\n    } catch (error) {\n      if (error.stack) {\n        this.logger.error('Peer request handler error:');\n        error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n      } else {\n        this.logger.error(`Peer request handler error: ${error.message}`);\n      }\n      response = { success: false, code: 500, message: 'Peer request handler error' };\n    }\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      this.logger.error(`Cannot respond to peer request from socket ID ${socketId}, socket does not exist`);\n      return;\n    }\n    if (response.success) {\n      const unencoded = new PeerResponse({ id: this.id, success: true, code: response.code, message: response.message });\n      this.addPeer(socketId, peerId);\n      ws.send(this.encode(unencoded), true, false);\n      // Reset local values so they don't get overwritten on OR map sync\n      this.providers.set(this.id, [...this.provideCallbacks.keys()]);\n      this.receivers.set(this.id, [...this.receiveCallbacks.keys()]);\n      for (const key of this.subscriptions.targets) {\n        this.peerSubscriptions.add([this.id, key]);\n      }\n      this.syncPeerSocket(socketId, peerId);\n    } else {\n      const unencoded = new PeerResponse({ success: false, code: response.code, message: response.message });\n      ws.send(this.encode(unencoded), true, false);\n    }\n  }\n\n  /**\n   * Top level handler for incoming subscribe request messages. Uses the default/custom subscribeRequestHandler method to validate.\n   * @param {number} socketId Socket ID from which the request was received\n   * @param {Object} credentials Credentials object\n   * @param {string} key Key the subscriber is requesting updates on\n   * @return {void}\n   */\n  async handleSubscribeRequest(socketId:number, credentials:Object, key:string) {\n    await this.waitForSocketCredentialQueue(socketId);\n    let response;\n    try {\n      response = await this.subscribeRequestHandler(key, credentials);\n    } catch (error) {\n      if (error.stack) {\n        this.logger.error('Subscribe request handler error:');\n        error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n      } else {\n        this.logger.error(`Subscribe request handler error: ${error.message}`);\n      }\n      response = { success: false, code: 500, message: 'Subscribe request handler error' };\n    }\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      this.logger.error(`Cannot respond to subscribe request from socket ID ${socketId}, socket does not exist`);\n      return;\n    }\n    if (response.success) {\n      this.addSubscription(socketId, key);\n    }\n    const unencoded = new SubscribeResponse({ key, success: response.success, code: response.code, message: response.message });\n    ws.send(this.encode(unencoded), true, false);\n  }\n\n  /**\n   * Top level handler for incoming event subscribe request messages. Uses the default/custom eventSubscribeRequestHandler method to validate.\n   * @param {number} socketId Socket ID from which the request was received\n   * @param {Object} credentials Credentials object\n   * @param {string} name Event name the subscriber is requesting updates on\n   * @return {void}\n   */\n  async handleEventSubscribeRequest(socketId:number, credentials:Object, name:string) {\n    await this.waitForSocketCredentialQueue(socketId);\n    let response;\n    try {\n      response = await this.eventSubscribeRequestHandler(name, credentials);\n    } catch (error) {\n      if (error.stack) {\n        this.logger.error('Event subscribe request handler error:');\n        error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n      } else {\n        this.logger.error(`Event subscribe request handler error: ${error.message}`);\n      }\n      response = { success: false, code: 500, message: 'Event subscribe request handler error' };\n    }\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      this.logger.error(`Cannot respond to event subscribe request from socket ID ${socketId}, socket does not exist`);\n      return;\n    }\n    if (response.success) {\n      this.addEventSubscription(socketId, name);\n    }\n    const unencoded = new EventSubscribeResponse({ name, success: response.success, code: response.code, message: response.message });\n    ws.send(this.encode(unencoded), true, false);\n  }\n\n  /**\n   * Top level handler for incoming publish request messages. Uses the default/custom publishRequestHandler method to validate.\n   * @param {number} socketId Socket ID from which the request was received\n   * @param {Object} credentials Credentials object\n   * @param {string} key Key the publisher is requesting to publish to\n   * @return {void}\n   */\n  async handlePublishRequest(socketId:number, credentials:Object, key:string) {\n    await this.waitForSocketCredentialQueue(socketId);\n    let response;\n    try {\n      response = await this.publishRequestHandler(key, credentials);\n    } catch (error) {\n      if (error.stack) {\n        this.logger.error('Publish request handler error:');\n        error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n      } else {\n        this.logger.error(`Publish request handler error: ${error.message}`);\n      }\n      response = { success: false, code: 500, message: 'Publish request handler error' };\n    }\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      this.logger.error(`Cannot respond to publish request from socket ID ${socketId}, socket does not exist`);\n      return;\n    }\n    if (response.success) {\n      this.addPublisher(socketId, key);\n    }\n    const unencoded = new PublishResponse({ key, success: response.success, code: response.code, message: response.message });\n    ws.send(this.encode(unencoded), true, false);\n  }\n\n  /**\n   * Top level message handler, used by both sockets and connections.\n   * @param {DataDump|ProviderDump|ActiveProviderDump|PeerDump|PeerSubscriptionDump|PeerSync|PeerSyncResponse|BraidEvent} message Message to handle\n   * @return {void}\n   */\n  handleMessage(message:DataDump|ProviderDump|ActiveProviderDump|ReceiverDump|PeerDump|PeerSubscriptionDump|PeerSync|PeerSyncResponse|BraidEvent|BraidSocketEvent|PublisherOpen|PublisherClose|PublisherPeerMessage|MultipartContainer|DataSyncInsertions|DataSyncDeletions|CustomMapDump|CustomSetDump, peerId:number) {\n    if (message instanceof DataSyncInsertions) {\n      this.data.process([message.insertions, []], true);\n      return;\n    } else if (message instanceof DataSyncDeletions) {\n      this.data.process([[], message.deletions], true);\n      return;\n    } else if (message instanceof MultipartContainer) {\n      this.handleMultipartContainer(message, peerId);\n      return;\n    } else if (message instanceof PeerSync) {\n      this.handlePeerSync(message);\n      return;\n    } else if (message instanceof PeerSyncResponse) {\n      this.emit('peerSyncResponse', message.value);\n      return;\n    } else if (message instanceof BraidSocketEvent) {\n      if (this.messageHashes.has(message.id)) {\n        return;\n      }\n      this.messageHashes.set(message.id, true);\n      if (this.id === message.peerId) {\n        this.publishSocketEvent(message.name, message.args, message.socketId, message.id);\n      } else {\n        this.publishToPeers(message);\n      }\n      return;\n    } else if (message instanceof BraidEvent) {\n      if (this.messageHashes.has(message.id)) {\n        return;\n      }\n      this.messageHashes.set(message.id, true);\n      this.publishEvent(message.name, message.args, message.id);\n      this.publishToPeers(message);\n      return;\n    } else if (message instanceof PublisherOpen) {\n      this.handlePublisherOpen(message.regexString, message.key, message.serverId, message.socketId, message.credentials);\n      return;\n    } else if (message instanceof PublisherClose) {\n      this.handlePublisherClose(message.key, message.serverId, message.socketId);\n      return;\n    } else if (message instanceof PublisherPeerMessage) {\n      this.handlePublisherPeerMessage(message.key, message.serverId, message.socketId, message.message);\n      return;\n    }\n    const hash = hash32(message.queue);\n    if (this.messageHashes.has(hash)) {\n      return;\n    }\n    this.messageHashes.set(hash, true);\n    if (message instanceof DataDump) {\n      this.data.process(message.queue, true);\n      this.publishData(message.queue);\n    } else if (message instanceof PeerSubscriptionDump) {\n      this.peerSubscriptions.process(message.queue, true);\n    } else if (message instanceof ProviderDump) {\n      this.providers.process(message.queue, true);\n    } else if (message instanceof ActiveProviderDump) {\n      this.activeProviders.process(message.queue, true);\n    } else if (message instanceof ReceiverDump) {\n      this.receivers.process(message.queue, true);\n    } else if (message instanceof PeerDump) {\n      this.peers.process(message.queue, true);\n    } else if (message instanceof CustomMapDump) {\n      const customMap = this.maps[message.name]; // eslint-disable-line no-underscore-dangle\n      if (typeof customMap !== 'undefined') {\n        customMap.process(message.queue, true);\n      }\n    } else if (message instanceof CustomSetDump) {\n      const customSet = this.sets[message.name]; // eslint-disable-line no-underscore-dangle\n      if (typeof customSet !== 'undefined') {\n        customSet.process(message.queue, true);\n      }\n    }\n    this.publishToPeers(message);\n  }\n\n  /**\n   * Publish event to subscribers.\n   * @param {BraidEvent} Event object\n   * @return {void}\n   */\n  publishEvent(name:string, args:Array<any>, id:string) {\n    let encoded;\n    for (const socketId of this.eventSubscriptions.getSources(name)) {\n      const ws = this.sockets.get(socketId);\n      if (!ws) {\n        throw new Error(`Can not publish data to event subscriber ${socketId}, socket does not exist`);\n      }\n      if (!encoded) {\n        const subscriberEvent = new BraidEvent(name, args, id, []);\n        encoded = this.encode(subscriberEvent);\n      }\n      ws.send(encoded, true, false);\n    }\n  }\n\n  /**\n   * Publish event to subscribers.\n   * @param {BraidEvent} Event object\n   * @return {void}\n   */\n  publishSocketEvent(name:string, args:Array<any>, socketId: number, id:string) {\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      throw new Error(`Can not publish data to event subscriber ${socketId}, socket does not exist`);\n    }\n    const subscriberEvent = new BraidEvent(name, args, id, []);\n    ws.send(this.encode(subscriberEvent), true, false);\n  }\n\n  /**\n   * Publish data to subscribers.\n   * @param {[Array<*>, Array<*>]} Data dump queue.\n   * @return {void}\n   */\n  publishData(queue:[Array<*>, Array<*>]) {\n    const insertions = new Map();\n    const deletions = new Map();\n    const subscriptionMap = new Map();\n    for (const [key, valuePair] of queue[0]) {\n      insertions.set(key, valuePair);\n      for (const socketId of this.subscriptions.getSources(key)) {\n        let subscriptions = subscriptionMap.get(socketId);\n        if (!subscriptions) {\n          subscriptions = new Set();\n          subscriptionMap.set(socketId, subscriptions);\n        }\n        subscriptions.add(key);\n      }\n    }\n    for (const [valueId, key] of queue[1]) {\n      deletions.set(key, valueId);\n      for (const socketId of this.subscriptions.getSources(key)) {\n        let subscriptions = subscriptionMap.get(socketId);\n        if (!subscriptions) {\n          subscriptions = new Set();\n          subscriptionMap.set(socketId, subscriptions);\n        }\n        subscriptions.add(key);\n      }\n    }\n    for (const [socketId, keys] of subscriptionMap) {\n      const ws = this.sockets.get(socketId);\n      if (!ws) {\n        throw new Error(`Can not publish data to subscriber ${socketId}, socket does not exist`);\n      }\n      const insertionQueue = [];\n      const deletionQueue = [];\n      for (const key of keys) {\n        const valuePair = insertions.get(key);\n        if (valuePair) {\n          insertionQueue.push([key, valuePair]);\n        }\n        const valueId = deletions.get(key);\n        if (valueId) {\n          deletionQueue.push([valueId, key]);\n        }\n      }\n      ws.send(this.encode(new DataDump([insertionQueue, deletionQueue])), true, false);\n    }\n  }\n\n  /**\n   * Add an event subscription to a socket.\n   * @param {number} socketId Socket ID of the subscriber\n   * @param {string} name Name of the event to send\n   * @return {void}\n   */\n  addEventSubscription(socketId:number, name:string) {\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      throw new Error(`Can not add event subscriber with socket ID ${socketId} for name ${name}, socket does not exist`);\n    }\n    this.eventSubscriptions.addEdge(socketId, name);\n  }\n\n  /**\n   * Remove a subscription from a socket.\n   * @param {number} socketId Socket ID of the subscriber\n   * @param {string} name Name on which the subscriber should stop receiving events\n   * @return {void}\n   */\n  removeEventSubscription(socketId:number, name:string) {\n    this.eventSubscriptions.removeEdge(socketId, name);\n  }\n\n  /**\n   * Remove all subscriptions from a socket, for example after the socket disconnects\n   * @param {number} socketId Socket ID of the subscriber\n   * @return {void}\n   */\n  removeEventSubscriptions(socketId:number) {\n    for (const name of this.eventSubscriptions.getTargets(socketId)) {\n      this.removeEventSubscription(socketId, name);\n    }\n  }\n\n  /**\n   * Add a publisher socket to a receiver.\n   * @param {number} socketId Socket ID of the publisher\n   * @param {string} key Key to receive publisher messages\n   * @return {void}\n   */\n  addPublisher(socketId:number, key:string) {\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      throw new Error(`Can not add publisher with socket ID ${socketId} for key ${key}, socket does not exist`);\n    }\n    this.publishers.addEdge(socketId, key);\n    this.assignReceiver(key, socketId);\n  }\n\n  /**\n   * Remove a publisher socket from a receiver.\n   * @param {number} socketId Socket ID of the publisher\n   * @param {string} key Key on which the publisher should stop sending updates\n   * @return {void}\n   */\n  removePublisher(socketId:number, key:string) {\n    this.publishers.removeEdge(socketId, key);\n    this.unassignReceiver(key, socketId);\n  }\n\n  /**\n   * Remove all receivers from a publisher socket, for example after the socket disconnects\n   * @param {number} socketId Socket ID of the publisher\n   * @return {void}\n   */\n  removePublishers(socketId:number) {\n    for (const key of this.publishers.getTargets(socketId)) {\n      this.removePublisher(socketId, key);\n    }\n  }\n\n  /**\n   * Add a subscription to a socket.\n   * @param {number} socketId Socket ID of the subscriber\n   * @param {string} key Key to provide the subscriber with updates\n   * @return {void}\n   */\n  addSubscription(socketId:number, key:string) {\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      throw new Error(`Can not add subscriber with socket ID ${socketId} for key ${key}, socket does not exist`);\n    }\n    this.subscriptions.addEdge(socketId, key);\n    this.peerSubscriptions.add([this.id, key]);\n    const pair = this.data.pairs.get(key);\n    if (pair) {\n      const insertionQueue = typeof pair[1] === 'undefined' ? [[key, [pair[0]]]] : [[key, pair]];\n      ws.send(this.encode(new DataDump([insertionQueue, []])), true, false);\n    }\n  }\n\n  /**\n   * Remove a subscription from a socket.\n   * @param {number} socketId Socket ID of the subscriber\n   * @param {string} key Key on which the subscriber should stop receiving updates\n   * @return {void}\n   */\n  removeSubscription(socketId:number, key:string) {\n    this.subscriptions.removeEdge(socketId, key);\n    if (this.subscriptions.getSources(key).size === 0) {\n      this.peerSubscriptions.delete([this.id, key]);\n    }\n  }\n\n  /**\n   * Remove all subscriptions from a socket, for example after the socket disconnects\n   * @param {number} socketId Socket ID of the subscriber\n   * @return {void}\n   */\n  removeSubscriptions(socketId:number) {\n    for (const key of this.subscriptions.getTargets(socketId)) {\n      this.removeSubscription(socketId, key);\n    }\n  }\n\n  /**\n   * Assign a provider to a key.\n   * @param {string} key Key to provide peers with updates, which peers will then disseminate to subscribers\n   * @return {void}\n   */\n  assignProvider(key:string) {\n    if (this.activeProviders.has(key)) {\n      return;\n    }\n    if (!this.peerSubscriptionMap.has(key)) {\n      return;\n    }\n    const peerIdAndRegexStrings = [];\n    for (const [peerId, regexes] of this.providerRegexes) {\n      for (const [regexString, regex] of regexes) {\n        if (regex.test(key)) {\n          peerIdAndRegexStrings.push([peerId, regexString]);\n          break;\n        }\n      }\n    }\n    if (peerIdAndRegexStrings.length === 0) {\n      this.logger.warn(`Unable to find provider for \"${key}\"`);\n      return;\n    }\n    peerIdAndRegexStrings.sort((x, y) => (x[0] === y[0] ? (x[1] > y[1] ? 1 : -1) : (x[0] > y[0] ? 1 : -1)));\n    const peerIdAndRegexString = peerIdAndRegexStrings[farmhash.hash32(key) % peerIdAndRegexStrings.length];\n    this.activeProviders.set(key, peerIdAndRegexString);\n  }\n\n  /**\n   * Indicate this server instance is providing for keys matching the regex string.\n   * @param {string} regexString Regex to match keys with\n   * @param {(key:string, active:boolean) => void} callback Callback function, called when a provider should start or stop providing values\n   * @return {void}\n   */\n  provide(regexString:string, callback: (key:string, active:boolean) => void|Promise<void>, options?: {debounce?: number} = {}) {\n    const regexStrings = new Set(this.providers.get(this.id));\n    regexStrings.add(regexString);\n    this.provideCallbacks.set(regexString, callback);\n    this.provideOptions.set(regexString, options);\n    this.providers.set(this.id, [...regexStrings]);\n  }\n\n  /**\n   * Indicate this server instance is no longer providing for keys matching the regex string.\n   * @param {string} regexString Regex to match keys with\n   * @param {(key:string, active:boolean) => void} callback Callback function, called when a provider should start or stop providing values\n   * @return {void}\n   */\n  unprovide(regexString:string) {\n    const regexStrings = new Set(this.providers.get(this.id));\n    regexStrings.delete(regexString);\n    this.provideCallbacks.delete(regexString);\n    this.provideOptions.delete(regexString);\n    if (regexStrings.size > 0) {\n      this.providers.set(this.id, [...regexStrings]);\n    } else {\n      this.providers.delete(this.id);\n    }\n    for (const [key, [peerId, activeRegexString]] of this.activeProviders) {\n      if (regexString === activeRegexString && peerId === this.id) {\n        this.activeProviders.delete(key);\n        this.assignProvider(key);\n      }\n    }\n  }\n\n  /**\n   * Assign a receiver to a key.\n   * @param {string} key Key to for a socket to publish to, which peers will then disseminate to recivers\n\n   * @return {void}\n   */\n  assignReceiver(key:string, socketId: number) {\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      this.logger.error(`Cannot assign \"${key}\" receiver for ${socketId}, socket does not exist`);\n      return;\n    }\n    const { credentials } = ws;\n    const peerIdWithRegexes = [];\n    for (const [peerId, regexMap] of this.receiverRegexes) {\n      for (const [regexString, regex] of regexMap) { // eslint-disable-line no-unused-vars\n        if (regex.test(key)) {\n          if (this.id === peerId) {\n            this.publisherSessions.add(key, this.id, socketId, regexString);\n            this.receiverServers.add(key, socketId, this.id);\n            this.handlePublisherOpen(regexString, key, this.id, socketId, credentials);\n            return;\n          }\n          peerIdWithRegexes.push([peerId, regexString]);\n          break;\n        }\n      }\n    }\n    if (peerIdWithRegexes.length === 0) {\n      this.logger.warn(`Unable to find receiver for \"${key}\"`);\n      return;\n    }\n    const [activePeerId, regexString] = peerIdWithRegexes[Math.floor(Math.random() * peerIdWithRegexes.length)];\n    this.publisherSessions.add(key, activePeerId, socketId, regexString);\n    this.receiverServers.add(key, socketId, activePeerId);\n    this.sendToPeer(activePeerId, new PublisherOpen(regexString, key, this.id, socketId, credentials));\n  }\n\n  /**\n   * Unassign a receiver to a key.\n   * @param {string} key Key that the socket was publishing to\n\n   * @return {void}\n   */\n  unassignReceiver(key:string, socketId: number) {\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      this.logger.error(`Cannot unassign \"${key}\" receiver for ${socketId}, socket does not exist`);\n      return;\n    }\n    const serverIds = this.receiverServers.servers(key, socketId);\n    this.receiverServers.removePublisher(key, socketId);\n    for (const serverId of serverIds) {\n      this.publisherSessions.removePublisher(key, serverId, socketId);\n      if (this.id === serverId) {\n        this.handlePublisherClose(key, this.id, socketId);\n      } else {\n        this.sendToPeer(serverId, new PublisherClose(key, this.id, socketId));\n      }\n    }\n    if (serverIds.length === 0) {\n      this.logger.warn(`Unable to unassign receiver for socket ${socketId} with key \"${key}\"`);\n    }\n  }\n\n  /**\n   * Top level publisher open handler\n   * @param {string} key Key the socket is publishing to\n   * @param {number} socketId Socket ID of the peer\n   * @param {Object} credentials Credentials object\n   * @return {void}\n   */\n  handlePublisherOpen(regexString:string, key:string, serverId:number, socketId:number, credentials:Object) {\n    const regexMap = this.receiverRegexes.get(this.id);\n    if (!regexMap) {\n      this.logger.warn(`Unable to find matching receiver regexes for \"${key}\"`);\n      return;\n    }\n    if (!regexMap.has(regexString)) {\n      this.logger.warn(`Unable to find matching receiver regex \"${regexString}\" for \"${key}\"`);\n      return;\n    }\n    const callbacks = this.receiveCallbacks.get(regexString);\n    if (!callbacks) {\n      this.logger.warn(`Unable to find matching receiver callbacks for \"${regexString}\"`);\n      return;\n    }\n    this.publisherServers.add(key, socketId, serverId);\n    this.receiverSessions.add(key, serverId, socketId, regexString);\n    const openCallback = callbacks[1];\n    if (typeof openCallback === 'function') {\n      openCallback(key, serverId, socketId, credentials);\n    }\n  }\n\n  /**\n   * Top level publisher close handler\n   * @param {string} key Key the socket is publishing to\n   * @param {number} socketId Socket ID of the peer\n   * @return {void}\n   */\n  handlePublisherClose(key:string, serverId:number, socketId:number) {\n    const regexStrings = this.receiverSessions.regexes(key, serverId, socketId);\n    this.publisherServers.removePublisher(key, socketId);\n    this.receiverSessions.removePublisher(key, serverId, socketId);\n    for (const regexString of regexStrings) {\n      const callbacks = this.receiveCallbacks.get(regexString);\n      if (!callbacks) {\n        continue;\n      }\n      const closeCallback = callbacks[2];\n      if (typeof closeCallback === 'function') {\n        closeCallback(key, serverId, socketId);\n        return;\n      }\n    }\n    this.logger.warn(`Unable to find receive session callbacks for \"${key}\" and server ${serverId}, socket ${socketId}`);\n  }\n\n  handlePublisherMessage(key:string, socketId:number, message:any) {\n    for (const peerId of this.receiverServers.servers(key, socketId)) {\n      if (this.id === peerId) {\n        this.handlePublisherPeerMessage(key, this.id, socketId, message);\n        return;\n      }\n      this.sendToPeer(peerId, new PublisherPeerMessage(key, this.id, socketId, message));\n      return;\n    }\n    this.logger.warn(`Unable to find receive session callbacks for \"${key}\" and socket ${socketId}`);\n  }\n\n  handlePublisherPeerMessage(key:string, serverId:number, socketId:number, message:any) {\n    const regexStrings = this.receiverSessions.regexes(key, serverId, socketId);\n    for (const regexString of regexStrings) {\n      const callbacks = this.receiveCallbacks.get(regexString);\n      if (!callbacks) {\n        continue;\n      }\n      const messageCallback = callbacks[0];\n      if (typeof messageCallback === 'function') {\n        messageCallback(key, serverId, socketId, message);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Indicate this server instance is receiving messages from publishers for keys matching the regex string.\n   * @param {string} regexString Regex to match keys with\n   * @param {(key:string, active:boolean) => void} callback Callback function, called when a receiver should start or stop receiving values\n   * @return {void}\n   */\n  receive(regexString:string, messageCallback?: (key:string, serverId:number, socketId: number, message: any,) => void|Promise<void>, openCallback?: (key:string, serverId:number, socketId: number, credentials:Object) => void|Promise<void>, closeCallback?: (key:string, serverId:number, socketId: number) => void|Promise<void>) {\n    const regexStrings = new Set(this.receivers.get(this.id));\n    regexStrings.add(regexString);\n    this.receiveCallbacks.set(regexString, [messageCallback, openCallback, closeCallback]);\n    this.receivers.set(this.id, [...regexStrings]);\n  }\n\n  /**\n   * Indicate this server instance is no longer receiving from publishers for keys matching the regex string.\n   * @param {string} regexString Regex to match keys with\n   * @param {(key:string, active:boolean) => void} callback Callback function, called when a receiver should start or stop receiving values\n   * @return {void}\n   */\n  unreceive(regexString:string) {\n    for (const [key, serverId, socketId] of this.receiverSessions.publishers(regexString)) {\n      if (this.id === serverId) {\n        this.handlePublisherClose(key, this.id, socketId);\n      }\n    }\n    const regexStrings = new Set(this.receivers.get(this.id));\n    regexStrings.delete(regexString);\n    this.receiveCallbacks.delete(regexString);\n    if (regexStrings.size > 0) {\n      this.receivers.set(this.id, [...regexStrings]);\n    } else {\n      this.receivers.delete(this.id);\n    }\n  }\n\n  /**\n   * Update the peers Observed remove map with local peer IDs\n   * @return {void}\n   */\n  updatePeers() {\n    const peerIds = [...this.peerConnections.keys(), ...this.peerSockets.targets];\n    if (peerIds.length === 0) {\n      this.peers.delete(this.id);\n    } else {\n      this.peers.set(this.id, peerIds);\n    }\n  }\n\n  /**\n   * Traverse through the peers Observed remove map to find all peers through which the specified peer is connected to\n   * @param {number} id Peer ID of the root peer\n   * @param {Set<number>} peerIds Set to add connected peers to. (Passed by reference.)\n   * @return {void}\n   */\n  connectedPeers(id:number, peerIds:Set<number>) {\n    const values = this.peers.get(id);\n    if (!values) {\n      return;\n    }\n    for (const peerId of values) {\n      if (peerIds.has(peerId)) {\n        continue;\n      }\n      peerIds.add(peerId);\n      this.connectedPeers(peerId, peerIds);\n    }\n  }\n\n  /**\n   * Traverse through connected peers and remove any peers without a direct path. Used after a peer disconnects.\n   * @return {void}\n   */\n  prunePeers() {\n    const connectedPeerIds = new Set();\n    const disconnectedPeerIds = new Set();\n    this.connectedPeers(this.id, connectedPeerIds);\n    for (const peerId of this.peers.keys()) {\n      if (this.id === peerId) {\n        continue;\n      }\n      if (!connectedPeerIds.has(peerId)) {\n        disconnectedPeerIds.add(peerId);\n      }\n    }\n    disconnectedPeerIds.forEach((peerId) => this.removePeer(peerId));\n  }\n\n  /**\n   * Removes a peer, reassigning any active providers.\n   * @param {number} peerId Peer ID of the peer\n   * @return {void}\n   */\n  removePeer(peerId: number) {\n    this.logger.info(`Removing peer ${peerId}`);\n    this.peers.delete(peerId);\n    this.providers.delete(peerId);\n    this.providerRegexes.delete(peerId);\n    this.receivers.delete(peerId);\n    this.receiverRegexes.delete(peerId);\n    for (const [pId, key] of this.peerSubscriptions) {\n      if (pId === peerId) {\n        this.peerSubscriptions.delete([pId, key]);\n      }\n    }\n    for (const [key, [pId]] of this.activeProviders) {\n      if (pId === peerId) {\n        this.activeProviders.delete(key);\n        this.assignProvider(key);\n      }\n    }\n    const publishers = this.receiverServers.publishers(peerId);\n    this.receiverServers.removeServer(peerId);\n    for (const [key, socketId] of publishers) {\n      this.assignReceiver(key, socketId);\n    }\n    for (const [key, socketId] of this.publisherServers.publishers(peerId)) {\n      this.handlePublisherClose(key, peerId, socketId);\n    }\n    this.publisherServers.removeServer(peerId);\n  }\n\n\n  /**\n   * Adds a peer.\n   * @param {number} socketId Socket ID of the peer\n   * @param {number} peerId Peer ID of the peer\n   * @return {void}\n   */\n  addPeer(socketId:number, peerId:number) {\n    const ws = this.sockets.get(socketId);\n    if (!ws) {\n      throw new Error(`Can not add peer with socket ID ${socketId}, socket does not exist`);\n    }\n    this.logger.info(`Adding peer ${ws.credentials && ws.credentials.ip ? ws.credentials.ip : 'with unknown IP'} (${socketId}) with ID ${peerId}`);\n    this.peerSockets.addEdge(socketId, peerId);\n    this.emit('addPeer', peerId);\n    this.updatePeers();\n  }\n\n  /**\n   * Stops the server by gracefully closing all sockets and outgoing connections\n   * @return {Promise<void>}\n   */\n  async close() {\n    this.logger.info('Closing');\n    this.isClosing = true;\n    for (const [socketId, socket] of this.sockets) {\n      this.logger.info(`Sending close event with code 1001 to socket ${socketId} during server close`);\n      socket.end(1001, 'Shutting down');\n    }\n    const peerDisconnectPromises = [];\n    for (const peerId of this.peerConnections.keys()) {\n      peerDisconnectPromises.push(this.disconnectFromPeer(peerId));\n    }\n    for (const [key, timeout] of this.provideDebounceTimeouts) {\n      clearTimeout(timeout);\n      this.provideDebounceTimeouts.delete(key);\n    }\n    await Promise.all(peerDisconnectPromises);\n    for (const [peerId, reconnectTimeout] of this.peerReconnectTimeouts) {\n      this.logger.warn(`Clearing peer ${peerId} reconnect timeout during server close`);\n      clearTimeout(reconnectTimeout);\n    }\n    this.peerReconnectTimeouts.clear();\n    const timeout = Date.now() + 10000;\n    while (this.sockets.size > 0 && Date.now() < timeout) {\n      await new Promise((resolve) => setTimeout(resolve, 100));\n    }\n    this.peers.delete(this.id);\n    this.providers.delete(this.id);\n    this.providerRegexes.delete(this.id);\n    this.receivers.delete(this.id);\n    this.receiverRegexes.delete(this.id);\n    for (const [peerId, key] of this.peerSubscriptions) {\n      if (peerId === this.id) {\n        this.peerSubscriptions.delete([peerId, key]);\n      }\n    }\n    for (const [key, [peerId]] of this.activeProviders) {\n      if (peerId === this.id) {\n        this.activeProviders.delete(key);\n      }\n    }\n    this.receiverServers.removeServer(this.id);\n    for (const [key, socketId] of this.publisherServers.publishers(this.id)) {\n      this.handlePublisherClose(key, this.id, socketId);\n    }\n    this.publisherServers.removeServer(this.id);\n    this.receiveCallbacks.clear();\n    if (Date.now() > timeout) {\n      this.logger.warn('Closed after timeout');\n    } else {\n      this.logger.info('Closed');\n    }\n    this.provideCallbacks.clear();\n    this.provideOptions.clear();\n    for (const provideDebounceTimeout of this.provideDebounceTimeouts.values()) {\n      clearTimeout(provideDebounceTimeout);\n    }\n    this.provideDebounceTimeouts.clear();\n\n    clearInterval(this.flushInterval);\n    clearInterval(this.keyFlushInterval);\n  }\n\n  /**\n   * Connects to a peer\n   * @param {string} address Websocket URL of the peer\n   * @param {Object} [credentials] Credentials to send during the peer request\n   * @param {number} [attempt] Number of previous reconnect attempts\n   * @return {Promise<number>}\n   */\n  async connectToPeer(address:string, credentials?: Object):Promise<number> {\n    if (this.isClosing) {\n      throw new Error(`Unable to connect to ${address}, closing`);\n    }\n    this.logger.info(`Connecting to peer ${address}`);\n    const peerConnection = new PeerConnection(this.id, address, this.maxPayloadLength, credentials);\n    const messageQueue = [];\n    const queueMessages = (message:any) => {\n      messageQueue.push(message);\n    };\n    peerConnection.on('message', queueMessages);\n    let peerId;\n    try {\n      peerId = await peerConnection.open();\n    } catch (error) {\n      if (error.name === 'PeerError' && error.code === 801) {\n        const pId = error.peerId;\n        if (pId) {\n          this.logger.warn(`Socket to peer ${pId} at ${address} already exists`);\n          return pId;\n        }\n      }\n      if (error.name === 'PeerError' && error.code === 802) {\n        const pId = error.peerId;\n        if (pId) {\n          this.logger.warn(`Connection to peer ${pId} at ${address} already exists`);\n          return pId;\n        }\n      }\n      throw error;\n    }\n    if (!peerId) {\n      throw new Error(`Did not receive peer ID when connecting to ${address}`);\n    }\n    if (this.peerConnections.has(peerId)) {\n      await peerConnection.close(1000);\n      this.logger.warn(`Closing connection to ${address}, connection to peer ${peerId} already exists`);\n      return peerId;\n    }\n    if (this.peerSockets.hasTarget(peerId)) {\n      await peerConnection.close(1000);\n      this.logger.warn(`Closing connection to ${address}, socket with peer ${peerId} already exists`);\n      return peerId;\n    }\n    peerConnection.on('close', (code:number) => {\n      const shouldReconnect = this.peerConnections.has(peerId);\n      this.logger.info(`Connection to ${address} with peer ID ${peerId} closed with code ${code}`);\n      this.peerConnections.delete(peerId);\n      this.emit('removePeer', peerId);\n      this.updatePeers();\n      this.prunePeers();\n      if (!shouldReconnect) {\n        return;\n      }\n      if (this.isClosing) {\n        return;\n      }\n      if (code !== 1001) {\n        this.reconnectToPeer(peerId, 1, address, credentials);\n      }\n    });\n    this.peerConnections.set(peerId, peerConnection);\n    this.emit('addPeer', peerId);\n    peerConnection.removeListener('message', queueMessages);\n    peerConnection.on('message', (message:any) => {\n      this.handleMessage(message, peerId);\n    });\n    for (const message of messageQueue) {\n      this.handleMessage(message, peerId);\n    }\n    this.updatePeers();\n    this.logger.info(`Connected to ${address} with peer ID ${peerId}`);\n    // Reset local values so they don't get overwritten on OR map sync\n    this.providers.set(this.id, [...this.provideCallbacks.keys()]);\n    this.receivers.set(this.id, [...this.receiveCallbacks.keys()]);\n    for (const key of this.subscriptions.targets) {\n      this.peerSubscriptions.add([this.id, key]);\n    }\n\n\n    await this.syncPeerConnection(peerId);\n    return peerId;\n  }\n\n  /**\n   * Disconnect from a peer\n   * @param {number} peerId Peer ID\n   * @return {Promise<void>}\n   */\n  async disconnectFromPeer(peerId: number) {\n    const peerConnection = this.peerConnections.get(peerId);\n    this.peerConnections.delete(peerId);\n    this.emit('removePeer', peerId);\n    const peerReconnectTimeout = this.peerReconnectTimeouts.get(peerId);\n    if (typeof peerReconnectTimeout !== 'undefined') {\n      this.peerReconnectTimeouts.delete(peerId);\n      this.logger.info(`Clearing peer ${peerId} reconnect timeout during disconnect`);\n      clearTimeout(peerReconnectTimeout);\n    }\n    if (peerConnection) {\n      await peerConnection.close(1001, 'Disconnect requested');\n    }\n    for (const socketId of this.peerSockets.getSources(peerId)) {\n      const socket = this.sockets.get(socketId);\n      if (!socket) {\n        this.logger.warn(`Unable to find socket ${socketId} for peer ${peerId} during disconnect`);\n        continue;\n      }\n      await new Promise((resolve, reject) => {\n        const handleClose = (sId:number) => {\n          if (sId !== socketId) {\n            return;\n          }\n          this.removeListener('error', handleError);\n          this.removeListener('close', handleClose);\n          resolve();\n        };\n        const handleError = (error:Error) => {\n          this.removeListener('error', handleError);\n          this.removeListener('close', handleClose);\n          reject(error);\n        };\n        this.on('error', handleError);\n        this.on('close', handleClose);\n        this.logger.info(`Sending close event with code 1001 to socket ${socketId} during peer disconnect`);\n        socket.end(1001, 'Peer disconnecting');\n      });\n      this.logger.info(`Closed socket ${socketId} for peer ${peerId} during disconnect`);\n    }\n  }\n\n  /**\n   * Send a peer sync message to an (outgoing) peer connection\n   * @param {number} peerId Peer ID to reconnect to\n   * @param {number} [attempt] Number of previous reconnect attempts\n   * @param {string} address Websocket URL of the peer\n   * @param {Object} [credentials] Credentials to send during the peer reconnect request\n   * @return {void}\n   */\n  reconnectToPeer(peerId:number, attempt: number, address:string, credentials?: Object) {\n    if (this.isClosing) {\n      return;\n    }\n    let peerReconnectTimeout = this.peerReconnectTimeouts.get(peerId);\n    if (typeof peerReconnectTimeout !== 'undefined') {\n      this.peerReconnectTimeouts.delete(peerId);\n      this.logger.info(`Clearing peer ${peerId} reconnect timeout during subsequent reconnect`);\n      clearTimeout(peerReconnectTimeout);\n    }\n    const duration = attempt > 8 ? 60000 + Math.round(Math.random() * 10000) : attempt * attempt * 1000;\n    this.logger.warn(`Reconnect to peer ${peerId} attempt ${attempt} scheduled in ${Math.round(duration / 100) / 10} seconds`);\n    peerReconnectTimeout = setTimeout(async () => {\n      this.logger.info(`Reconnecting to peer ${peerId}, attempt ${attempt}`);\n      this.peerReconnectTimeouts.delete(peerId);\n      try {\n        await this.connectToPeer(address, credentials);\n      } catch (error) {\n        if (error.name === 'PeerError' && error.code === 801) {\n          this.logger.warn(`Socket to peer ${peerId} at ${address} already exists`);\n          return;\n        }\n        if (error.name === 'PeerError' && error.code === 802) {\n          this.logger.warn(`Connection to peer ${peerId} at ${address} already exists`);\n          return;\n        }\n        if (error.name === 'CloseError' && error.code === 502) {\n          this.logger.warn(`Connection closed before response from peer ${peerId} at ${address} was received`);\n          return;\n        }\n        if (error.stack) {\n          this.logger.error(`Error reconnecting to peer ${peerId} at ${address}:`);\n          error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n        } else {\n          this.logger.error(`Error reconnecting to peer ${peerId} at ${address}`);\n        }\n        this.reconnectToPeer(peerId, attempt + 1, address, credentials);\n      }\n    }, duration);\n    this.peerReconnectTimeouts.set(peerId, peerReconnectTimeout);\n  }\n\n  /**\n   * Handle a peer sync message, updating all shared maps with the provided data\n   * @param {PeerSync} peerSync Peer sync object\n   * @return {void}\n   */\n  handlePeerSync(peerSync: PeerSync) {\n    this.peers.process(peerSync.peers.queue, true);\n    this.providers.process(peerSync.providers.queue, true);\n    this.receivers.process(peerSync.receivers.queue, true);\n    this.activeProviders.process(peerSync.activeProviders.queue, true);\n    this.peerSubscriptions.process(peerSync.peerSubscriptions.queue, true);\n    for (const customMapDump of peerSync.customMapDumps) {\n      const customMap = this.maps[customMapDump.name]; // eslint-disable-line no-underscore-dangle\n      if (typeof customMap !== 'undefined') {\n        customMap.process(customMapDump.queue, true);\n      }\n    }\n    const peerConnection = this.peerConnections.get(peerSync.id);\n    this.logger.info(`Sending peer sync response to peer ${peerSync.id}`);\n    if (peerConnection) {\n      if (peerConnection.ws.readyState !== 1) {\n        this.logger.error(`Unable to handle sync from peer ${peerSync.id}, connection is in ready state is ${peerConnection.ws.readyState}`);\n        return;\n      }\n      peerConnection.ws.send(this.encode(new PeerSyncResponse(this.id)));\n      return;\n    }\n    for (const socketId of this.peerSockets.getSources(peerSync.id)) {\n      const ws = this.sockets.get(socketId);\n      if (ws) {\n        ws.send(this.encode(new PeerSyncResponse(this.id)), true, false);\n        return;\n      }\n    }\n    this.logger.error(`Unable to handle sync from peer ${peerSync.id}, socket or connection does not exist`);\n  }\n\n  /**\n   * Send a peer sync message to an (outgoing) peer connection\n   * @param {number} peerId Peer ID to send sync message to\n   * @return {Promise<void>}\n   */\n  async syncPeerConnection(peerId: number) {\n    const peerConnection = this.peerConnections.get(peerId);\n    if (!peerConnection) {\n      this.logger.error(`Unable to sync peer ${peerId}, connection does not exist`);\n      return;\n    }\n    if (peerConnection.ws.readyState !== 1) {\n      this.logger.error(`Unable to sync peer ${peerId}, readystate ${peerConnection.ws.readyState}`);\n      return;\n    }\n    const customMapDumps = [];\n    for (const [name, customMap] of this._customMaps) { // eslint-disable-line no-underscore-dangle\n      const customMapDump = new CustomMapDump(name, customMap.dump());\n      customMapDumps.push(customMapDump);\n    }\n    const customSetDumps = [];\n    for (const [name, customSet] of this._customSets) { // eslint-disable-line no-underscore-dangle\n      const customSetDump = new CustomSetDump(name, customSet.dump());\n      customSetDumps.push(customSetDump);\n    }\n    const peerSync = new PeerSync(\n      this.id,\n      new PeerDump(this.peers.dump()),\n      new ProviderDump(this.providers.dump()),\n      new ReceiverDump(this.receivers.dump()),\n      new ActiveProviderDump(this.activeProviders.dump()),\n      new PeerSubscriptionDump(this.peerSubscriptions.dump()),\n      customMapDumps,\n      customSetDumps,\n    );\n    const peerSyncResponsePromise = new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        this.removeListener('peerSyncResponse', handlePeerSyncReponse);\n        peerConnection.removeListener('close', handleClose);\n        reject(new Error(`Timeout waiting for sync response from peer ${peerId}`));\n      }, 60000);\n      const handlePeerSyncReponse = (pId:number) => {\n        if (pId !== peerId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('peerSyncResponse', handlePeerSyncReponse);\n        peerConnection.removeListener('close', handleClose);\n        resolve();\n      };\n      const handleClose = () => {\n        clearTimeout(timeout);\n        this.removeListener('peerSyncResponse', handlePeerSyncReponse);\n        peerConnection.removeListener('close', handleClose);\n        reject(new Error(`Connection closed before sync response from peer ${peerId} was received`));\n      };\n      this.on('peerSyncResponse', handlePeerSyncReponse);\n      peerConnection.on('close', handleClose);\n    });\n    const message = this.encode(peerSync);\n    this.logger.info(`Sending ${message.length} byte peer sync message to peer ${peerId} connection`);\n    await this.sendLargeMessageToPeer(message, peerId);\n    try {\n      await peerSyncResponsePromise;\n      this.logger.info(`Received peer sync response from peer ${peerId}`);\n    } catch (error) {\n      if (error.stack) {\n        this.logger.error('Error in peer connection sync response:');\n        error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n      } else {\n        this.logger.error(`Error in peer connection sync response: ${error.message}`);\n      }\n    }\n    try {\n      await this.streamDataToPeer(peerId);\n      this.emit('peerSync', peerId);\n    } catch (error) {\n      if (error.stack) {\n        this.logger.error('Error in peer connection data stream:');\n        error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n      } else {\n        this.logger.error(`Error in peer connection data stream: ${error.message}`);\n      }\n    }\n  }\n\n  /**\n   * Send a peer sync message to an (incoming) peer socket\n   * @param {number} socketID Socket ID of peer to send sync message to\n   * @param {number} peerId Peer ID to send sync message to\n   * @return {Promise<void>}\n   */\n  async syncPeerSocket(socketId: number, peerId: number) {\n    const socket = this.sockets.get(socketId);\n    if (!socket) {\n      throw new Error(`Can not publish data to peer ${peerId} (${socketId}), socket does not exist`);\n    }\n    const customMapDumps = [];\n    for (const [name, customMap] of this._customMaps) { // eslint-disable-line no-underscore-dangle\n      const customMapDump = new CustomMapDump(name, customMap.dump());\n      customMapDumps.push(customMapDump);\n    }\n    const customSetDumps = [];\n    for (const [name, customSet] of this._customSets) { // eslint-disable-line no-underscore-dangle\n      const customSetDump = new CustomSetDump(name, customSet.dump());\n      customSetDumps.push(customSetDump);\n    }\n    const peerSync = new PeerSync(\n      this.id,\n      new PeerDump(this.peers.dump()),\n      new ProviderDump(this.providers.dump()),\n      new ReceiverDump(this.receivers.dump()),\n      new ActiveProviderDump(this.activeProviders.dump()),\n      new PeerSubscriptionDump(this.peerSubscriptions.dump()),\n      customMapDumps,\n      customSetDumps,\n    );\n    const peerSyncResponsePromise = new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        this.removeListener('peerSyncResponse', handlePeerSyncReponse);\n        this.removeListener('close', handleClose);\n        reject(new Error(`Timeout waiting for sync response from peer ${peerId}`));\n      }, 60000);\n      const handleClose = (sId:number) => {\n        if (sId !== socketId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('peerSyncResponse', handlePeerSyncReponse);\n        this.removeListener('close', handleClose);\n        reject(new Error(`Socket ${socketId} closed before sync response from peer ${peerId} was received`));\n      };\n      const handlePeerSyncReponse = (pId:number) => {\n        if (pId !== peerId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('peerSyncResponse', handlePeerSyncReponse);\n        this.removeListener('close', handleClose);\n        resolve();\n      };\n      this.on('peerSyncResponse', handlePeerSyncReponse);\n      this.on('close', handleClose);\n    });\n    const message = this.encode(peerSync);\n    this.logger.info(`Sending ${message.length} byte peer sync message to peer ${peerId} at socket ${socketId}`);\n    await this.sendLargeMessageToSocket(message, peerId, socketId);\n    try {\n      await peerSyncResponsePromise;\n      this.logger.info(`Received peer sync response from peer ${peerId} at socket ${socketId}`);\n    } catch (error) {\n      if (error.stack) {\n        this.logger.error('Error in peer socket sync response:');\n        error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n      } else {\n        this.logger.error(`Error in peer socket sync response: ${error.message}`);\n      }\n    }\n    try {\n      await this.streamDataToPeer(peerId);\n      this.emit('peerSync', peerId);\n    } catch (error) {\n      if (error.stack) {\n        this.logger.error('Error in peer socket data stream:');\n        error.stack.split('\\n').forEach((line) => this.logger.error(`\\t${line}`));\n      } else {\n        this.logger.error(`Error in peer socket data stream: ${error.message}`);\n      }\n    }\n  }\n\n  /**\n   * Check if peer exists\n   * @param {number} peerId Peer ID\n   * @return {boolean}\n   */\n  hasPeer(peerId: number):boolean {\n    return this.peerSockets.hasTarget(peerId) || this.peerConnections.has(peerId);\n  }\n\n  /**\n   * Wait for a specific peer to connect\n   * @param {number} peerId Peer ID\n   * @param {number} duration Number of milliseconds to wait before throwing an error\n   * @return {Promise<void>}\n   */\n  async waitForPeerConnect(peerId: number, duration?: number = 5000) {\n    if (this.hasPeer(peerId)) {\n      return;\n    }\n    await new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        this.removeListener('addPeer', handleAddPeer);\n        reject(new Error(`Peer did not connect within ${duration}ms`));\n      }, duration);\n      const handleAddPeer = (pId: number) => {\n        if (pId !== peerId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('addPeer', handleAddPeer);\n        resolve();\n      };\n      this.addListener('addPeer', handleAddPeer);\n    });\n  }\n\n  /**\n   * Wait for a specific peer to disconnect\n   * @param {number} peerId Peer ID\n   * @param {number} duration Number of milliseconds to wait before throwing an error\n   * @return {Promise<void>}\n   */\n  async waitForPeerDisconnect(peerId: number, duration?: number = 5000) {\n    if (!this.hasPeer(peerId)) {\n      return;\n    }\n    await new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        this.removeListener('removePeer', handleRemovePeer);\n        reject(new Error(`Peer did not disconnect within ${duration}ms`));\n      }, duration);\n      const handleRemovePeer = (pId: number) => {\n        if (pId !== peerId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('removePeer', handleRemovePeer);\n        resolve();\n      };\n      this.addListener('removePeer', handleRemovePeer);\n    });\n  }\n\n  /**\n   * Wait for any queued auth requests associated with the socket to complete\n   * @param {number} socketId Socket ID\n   * @return {void}\n   */\n  async waitForSocketCredentialQueue(socketId:number) {\n    // Wait for any credential handler operations to complete\n    const queue = this.socketCredentialQueues.get(socketId);\n    if (queue) {\n      this.logger.info(`Waiting for socket ${socketId} credential queue with size ${queue.size} and ${queue.pending} pending`);\n      await queue.onIdle();\n    }\n  }\n\n  async sendLargeMessageToPeer(message: Buffer, peerId:number):Promise<boolean> {\n    const peerConnection = this.peerConnections.get(peerId);\n    if (!peerConnection) {\n      this.logger.error(`Unable to send message to peer ${peerId}, connection does not exist`);\n      return false;\n    }\n    if (message.length > this.maxPayloadLength) {\n      const chunkSize = Math.round(this.maxPayloadLength / 2);\n      const chunks = MultipartContainer.chunk(message, chunkSize);\n      this.logger.info(`Sending ${message.length} byte message to peer ${peerId} connection in ${chunks.length} chunks`);\n      for (const chunk of chunks) {\n        if (peerConnection.ws.readyState !== 1) {\n          this.logger.error(`Unable to send message to peer ${peerId}, ready state is ${peerConnection.ws.readyState}`);\n          return false;\n        }\n        await new Promise((resolve, reject) => {\n          peerConnection.ws.send(chunk, (error) => {\n            if (error) {\n              reject(error);\n            } else {\n              resolve();\n            }\n          });\n        });\n      }\n      return true;\n    } else if (peerConnection.ws.readyState !== 1) {\n      this.logger.error(`Unable to send message to peer ${peerId}, ready state is ${peerConnection.ws.readyState}`);\n      return false;\n    }\n    await new Promise((resolve, reject) => {\n      peerConnection.ws.send(message, (error) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve();\n        }\n      });\n    });\n    return true;\n  }\n\n  async sendLargeMessageToSocket(message: Buffer, peerId:number, socketId:number):Promise<boolean> {\n    const socket = this.sockets.get(socketId);\n    if (!socket) {\n      this.logger.error(`Can not send message to socket ${socketId}, socket does not exist`);\n      return false;\n    }\n    if (message.length > this.maxPayloadLength) {\n      const chunkSize = Math.round(this.maxPayloadLength / 2);\n      const chunks = MultipartContainer.chunk(message, chunkSize);\n      this.logger.info(`Sending ${message.length} byte message to to peer ${peerId} socket ${socketId} in ${chunks.length} chunks`);\n      for (const chunk of chunks) {\n        if (socket.getBufferedAmount() > this.maxBackpressure) {\n          await this.waitForDrain(socketId);\n        }\n        socket.send(chunk, true, false);\n      }\n    } else {\n      socket.send(message, true, false);\n    }\n    await this.waitForDrain(socketId);\n    return true;\n  }\n\n  async streamDataToPeerSocket(peerId: number, socketId: number):Promise<void> {\n    const insertions = [];\n    for (const item of this.data.pairs) {\n      insertions.push(item);\n      if (insertions.length >= 100) {\n        const message = this.encode(new DataSyncInsertions(insertions));\n        const sent = await this.sendLargeMessageToSocket(message, peerId, socketId);\n        if (!sent) {\n          this.logger.error(`Can not stream data to peer ${peerId} (${socketId}), socket does not exist`);\n          return;\n        }\n        insertions.length = 0;\n      }\n    }\n    const deletionsMessage = this.encode(new DataSyncDeletions([...this.data.deletions]));\n    await this.sendLargeMessageToSocket(deletionsMessage, peerId, socketId);\n  }\n\n  async streamDataToPeerConnection(peerId:number) {\n    const insertions = [];\n    for (const item of this.data.pairs) {\n      insertions.push(item);\n      if (insertions.length >= 100) {\n        const message = this.encode(new DataSyncInsertions(insertions));\n        const sent = await this.sendLargeMessageToPeer(message, peerId);\n        if (!sent) {\n          this.logger.error(`Can not stream data to peer ${peerId}, connection does not exist`);\n          return;\n        }\n        insertions.length = 0;\n      }\n    }\n    const deletionsMessage = this.encode(new DataSyncDeletions([...this.data.deletions]));\n    await this.sendLargeMessageToPeer(deletionsMessage, peerId);\n  }\n\n\n  streamDataToPeer(peerId: number): void | Promise<void> { // eslint-disable-line consistent-return\n    if (this.peerConnections.has(peerId)) {\n      return this.streamDataToPeerConnection(peerId);\n    }\n    const socketId = [...this.peerSockets.getSources(peerId)][0];\n    if (this.sockets.has(socketId)) {\n      return this.streamDataToPeerSocket(peerId, socketId);\n    }\n    this.logger.error(`Unable to stream data to peer ${peerId}, no socket or connection exists`);\n  }\n\n  declare isClosing: boolean;\n  declare id: number;\n  declare shouldDeduplicate: boolean;\n  declare recordHashes: Map<string, string>;\n  declare recordHashObjects: Set<any>;\n  declare updateHashOnSet: (string, any) => void;\n  declare updateHashOnDelete: (string) => void;\n  declare maxPayloadLength: number;\n  declare maxBackpressure: number;\n  declare flushInterval: IntervalID;\n  declare keyFlushInterval: IntervalID;\n  declare mergeChunkPromises: Map<number, MergeChunksPromise>;\n  declare messageHashes: LruCache<string, boolean>;\n  declare eventSubscriptions: DirectedGraphMap<number, string>;\n  declare subscriptions: DirectedGraphMap<number, string>;\n  declare publishers: DirectedGraphMap<number, string>;\n  declare peerSockets:DirectedGraphMap<number, number>;\n  declare peerConnections:Map<number, PeerConnection>;\n  declare sockets:Map<number, UWSWebSocket>;\n  declare drainCallbacks:Map<number, [Array<() => void>, Array<(Error) => void>]>;\n  declare socketCredentialQueues:Map<number, PQueue>;\n  declare data:ObservedRemoveMap<string, any>;\n  declare peers:ObservedRemoveMap<number, Array<number>>;\n  declare providers:ObservedRemoveMap<number, Array<string>>;\n  declare provideCallbacks:Map<string, (string, boolean) => void|Promise<void>>;\n  declare provideOptions:Map<string, {debounce?: number}>;\n  declare provideDebounceTimeouts:Map<string, TimeoutID>;\n  declare activeProviders:ObservedRemoveMap<string, [number, string]>;\n  declare receivers:ObservedRemoveMap<number, Array<string>>;\n  declare receiveCallbacks:Map<string, [((string, number, number, any) => void|Promise<void>) | void, ((string, number, number, Object) => void|Promise<void>) | void, ((string, number, number) => void|Promise<void>) | void]>;\n  declare receiverSessions: PublisherSessionManager;\n  declare publisherSessions: PublisherSessionManager;\n  declare publisherServers: PublisherServerManager;\n  declare receiverServers: PublisherServerManager;\n  declare peerSubscriptions:ObservedRemoveSet<[number, string]>;\n  declare peerSubscriptionMap:Map<string, Set<number>>;\n  declare providerRegexes: Map<number, Array<[string, RegExp]>>;\n  declare receiverRegexes: Map<number, Map<string, RegExp>>;\n  declare peerRequestHandler: (credentials: Object) => Promise<{ success: boolean, code: number, message: string }>;\n  declare credentialsHandler: (credentials: Object) => Promise<{ success: boolean, code: number, message: string }>;\n  declare subscribeRequestHandler: (key:string, credentials: Object) => Promise<{ success: boolean, code: number, message: string }>;\n  declare publishRequestHandler: (key:string, credentials: Object) => Promise<{ success: boolean, code: number, message: string }>;\n  declare eventSubscribeRequestHandler: (name:string, credentials: Object) => Promise<{ success: boolean, code: number, message: string }>;\n  declare keysForDeletion:Map<string, number>;\n  declare peerReconnectTimeouts:Map<number, TimeoutID>;\n  declare logger: Logger;\n  declare maps: {[string]: ObservedRemoveMap<string, any>};\n  declare _customMaps: Map<string, ObservedRemoveMap<string, any>>;\n  declare sets: {[string]: ObservedRemoveSet<any>};\n  declare _customSets: Map<string, ObservedRemoveSet<any>>;\n}\n\nexport default Server;\n"],"file":"index.js"}